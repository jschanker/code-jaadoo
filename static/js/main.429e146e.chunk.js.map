{"version":3,"sources":["components/CodeSnippetRunner/index.js","assets/closed-treasure-chest.png","components/SpellsList.js","assets/open-treasure-chest-empty.svg.png","assets/lock.png","assets/wizard-walking-forward.gif","components/LevelMap.js","components/Level.js","assets/open-treasure-chest-gold.svg.png","components/Treasure.js","App.js","index.js"],"names":["CodeSnippetRunner","code","printFunctionStr","console","log","id","onClick","eval","SpellsList","spells","handler","setClicked","selectedElement","React","useRef","useEffect","forEach","item","target","current","style","position","top","left","width","backgroundColor","overflow","padding","whiteSpace","map","e","margin","ref","LevelMap","level","currentLevel","levels","completedLevels","slice","remainingLevels","useState","selectedLevel","setSelectedLevel","index","borderRadius","to","type","num","color","textDecoration","display","justifyContent","src","lock","alt","marginTop","height","textAlign","marginLeft","marginRight","currentTarget","stopPropagation","openTreasureChest","wizard","alignItems","fontWeight","closedTreasureChest","normalizeAnswer","answer","replace","Level","setClearedLevel","useParams","tutorialDirections","problems","description","questionArgs","answerArgs","problemData","setProblemData","isCorrect","setIsCorrect","problemNumber","setProblemNumber","questionArgIndices","setQuestionArgIndices","currentAnswer","setCurrentAnswer","gotHint","setGotHint","currentStreak","setCurrentStreak","tutorialStep","setTutorialStep","x","y","pointerPosition","setPointerPosition","handleCodeButtonClick","innerText","undefined","fetch","then","res","json","data","showAnswer","setShowAnswer","Infinity","numRemaining","setNumRemaining","questionNumber","Math","floor","random","length","arr","numToClear","c","times","problemInfo","expectedAnswer","_","a","expectedAnswerNormal","currentAnswerNormal","ele","getBoundingClientRect","endsWith","substring","max","Array","fill","join","split","flat","answerInput","document","getElementById","focus","scrollHeight","setTimeout","startsWith","role","ariaLabel","fontSize","maxWidth","minHeight","transition","readOnly","value","cols","rows","backgroundImage","backgroundSize","backgroundRepeat","backgroundPosition","fontFamily","resize","onChange","autoFocus","actualAnswerNormal","indexOfDivergence","from","findIndex","window","confirm","preventDefault","Treasure","setSpells","isOpened","setOpened","opened","treasureData","setTreasureData","openedHeading","openTreasureChestGold","usage","output","closedHeading","includes","treasure","concat","App","parseInt","JSON","parse","localStorage","getItem","setLevel","setItem","stringify","className","path","exact","element","rootElement","createRoot","render"],"mappings":"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","file":"static/js/main.429e146e.chunk.js","sourcesContent":["import \"./styles.css\";\r\n\r\nexport default function CodeSnippetRunner({ code }) {\r\n  const printFunctionStr = `const print = (...items) => {\r\n      Array.prototype.forEach.call(items, (item) => {\r\n      if(item instanceof Array) {\r\n        item = \"[ \" + item.map((a) => {\r\n          if(typeof a === \"string\") { return \"'\" + a.replace(\"'\", \"\\\\'\") + \"'\"; }\r\n          else { return a; }\r\n        }).reduce((acc, a) => {\r\n          return acc + \", \" + a;\r\n        }) + \" ]\";\r\n      }\r\n      document.getElementById(\"output\").appendChild(document.createTextNode(item));\r\n      document.getElementById(\"output\").appendChild(document.createTextNode(\" \"));\r\n    });\r\n    document.getElementById(\"output\").appendChild(document.createTextNode(\"\\\\n\"));\r\n  };`;\r\n  console.log(printFunctionStr + \"\\n\" + code);\r\n  return (\r\n    <div id=\"code-runner\">\r\n      <button onClick={() => eval(printFunctionStr + \"\\n\" + code)}>\r\n        Run Code\r\n      </button>\r\n      <pre id=\"output\"></pre>\r\n    </div>\r\n  );\r\n}\r\n","export default __webpack_public_path__ + \"static/media/closed-treasure-chest.32351da1.png\";","import React from \"react\";\r\n\r\nexport default function SpellsList({ spells, handler, setClicked }) {\r\n  const selectedElement = React.useRef(null);\r\n  React.useEffect(() => {\r\n    if (setClicked && typeof setClicked === \"function\") {\r\n      spells.forEach(\r\n        (item) =>\r\n          setClicked(item) && handler(item, { target: selectedElement.current })\r\n      );\r\n    }\r\n  }, [setClicked, spells, handler, selectedElement]);\r\n  /*\r\n  React.useEffect(() => {\r\n    if (typeof setClicked === \"function\") {\r\n      spells.forEach((item) => setClicked(item) && handler(item, null));\r\n    }\r\n  }, [setClicked, spells, handler]);\r\n  */\r\n  return (\r\n    <div\r\n      style={{\r\n        position: \"fixed\",\r\n        top: 0,\r\n        left: 0,\r\n        width: \"100%\",\r\n        backgroundColor: \"rgba(75,0,255,0.5)\",\r\n        overflow: \"auto\",\r\n        padding: \"5px\"\r\n      }}\r\n    >\r\n      <span style={{ whiteSpace: \"nowrap\" }}>\r\n        Available Code Spells:\r\n        {(spells || []).map((item) => (\r\n          <button\r\n            onClick={(e) => handler && handler(item, e)}\r\n            style={{ margin: \"5px 5px\" }}\r\n            ref={\r\n              typeof setClicked === \"function\" && setClicked(item)\r\n                ? selectedElement\r\n                : null\r\n            }\r\n            key={item}\r\n          >\r\n            {item}\r\n          </button>\r\n        ))}\r\n      </span>\r\n    </div>\r\n  );\r\n}\r\n","export default __webpack_public_path__ + \"static/media/open-treasure-chest-empty.svg.2a02895f.png\";","export default __webpack_public_path__ + \"static/media/lock.55b3f1d2.png\";","export default __webpack_public_path__ + \"static/media/wizard-walking-forward.f140a331.gif\";","import React from \"react\";\r\nimport closedTreasureChest from \"../assets/closed-treasure-chest.png\";\r\nimport openTreasureChest from \"../assets/open-treasure-chest-empty.svg.png\";\r\nimport lock from \"../assets/lock.png\";\r\nimport wizard from \"../assets/wizard-walking-forward.gif\";\r\nimport { HashLink } from \"react-router-hash-link\";\r\nimport SpellsList from \"./SpellsList\";\r\nexport default function LevelMap({ currentLevel, levels, spells }) {\r\n  const completedLevels = levels?.slice(0, currentLevel) || [];\r\n  const remainingLevels = levels?.slice(currentLevel) || [];\r\n  const [selectedLevel, setSelectedLevel] = React.useState(null);\r\n  const isLevelAccessible = (level) => level.index <= currentLevel;\r\n  return (\r\n    <div\r\n      style={\r\n        {\r\n          /*display: \"grid\",\r\n        gridTemplateColumns: \"100px 100px 100px\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\"*/\r\n        }\r\n      }\r\n      onClick={() => setSelectedLevel(null)}\r\n    >\r\n      <SpellsList spells={spells || [\"print\"]} />\r\n      {selectedLevel != null ? (\r\n        isLevelAccessible(selectedLevel) ? (\r\n          <div\r\n            style={{\r\n              position: \"fixed\",\r\n              width: \"100%\",\r\n              /*minHeight: \"100px\",*/\r\n              backgroundColor: \"rgba(127, 127, 255, 0.75)\",\r\n              borderRadius: \"20px\"\r\n            }}\r\n          >\r\n            <HashLink\r\n              to={`/${\r\n                selectedLevel.type === \"treasure\"\r\n                  ? `treasure/${selectedLevel.num}`\r\n                  : `level/${selectedLevel.num}`\r\n              }`}\r\n              style={{\r\n                color: \"black\",\r\n                textDecoration: \"none\",\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n                padding: \"50px 0\"\r\n              }}\r\n            >\r\n              {selectedLevel.type === \"treasure\"\r\n                ? `Click to collect treasure`\r\n                : `Click to Start Level ${selectedLevel.num}`}\r\n            </HashLink>\r\n          </div>\r\n        ) : (\r\n          <div\r\n            style={{\r\n              position: \"fixed\",\r\n              width: \"100%\",\r\n              /*minHeight: \"100px\",*/\r\n              backgroundColor: \"rgba(200, 200, 200, 0.5)\",\r\n              borderRadius: \"20px\",\r\n              padding: \"10px 0\"\r\n            }}\r\n          >\r\n            <img\r\n              src={lock}\r\n              alt=\"Locked\"\r\n              width=\"100\"\r\n            />\r\n            <p style={{ marginTop: 0 }}>\r\n              You need to successfully complete previous levels before you can\r\n              access this.\r\n            </p>\r\n          </div>\r\n        )\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      {completedLevels.map((level, index) => (\r\n        <div\r\n          style={{\r\n            borderRadius: \"30px\",\r\n            width: \"50px\",\r\n            height: \"50px\",\r\n            backgroundColor: \"gold\",\r\n            textAlign: \"center\",\r\n            marginLeft: \"auto\",\r\n            marginRight: \"auto\",\r\n            marginTop: \"10px\"\r\n          }}\r\n          id={level.index}\r\n          onClick={(e) => {\r\n            console.log(e.currentTarget.id);\r\n            setSelectedLevel(level);\r\n            e.stopPropagation();\r\n          }}\r\n        >\r\n          {level.type === \"treasure\" ? (\r\n            <img\r\n              src={openTreasureChest}\r\n              width=\"40\"\r\n              alt=\"open treasure chest\"\r\n            />\r\n          ) : (\r\n            `Level ${level.num}`\r\n          )}\r\n        </div>\r\n      ))}\r\n      <div>\r\n        <img\r\n          src={wizard}\r\n          alt=\"The wizard walks forward!\"\r\n          width=\"53\"\r\n        />\r\n      </div>\r\n      {remainingLevels.map((level, index) => (\r\n        <div \r\n          style={{\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\"\r\n          }}\r\n        >\r\n          <div style={{ fontWeight:\"bold\", color:\"#084\" }}>\r\n            {index === 0 && \"Click to proceed ➡️\"}\r\n          </div>\r\n          <div\r\n            style={{\r\n              borderRadius: \"30px\",\r\n              width: \"50px\",\r\n              height: \"50px\",\r\n              backgroundColor: \"#dddddd\",\r\n              textAlign: \"center\",\r\n              marginTop: \"10px\"\r\n            }}\r\n            id={level.index}\r\n            onClick={(e) => {\r\n              console.log(e.currentTarget.id);\r\n              setSelectedLevel(level);\r\n              e.stopPropagation();\r\n            }}\r\n          >\r\n            {level.type === \"treasure\" ? (\r\n              <img\r\n                src={closedTreasureChest}\r\n                width=\"40\"\r\n                alt=\"open treasure chest\"\r\n              />\r\n            ) : (\r\n              <span>{`Level ${level?.num}`}</span>\r\n            )}\r\n          </div>\r\n          <div style={{ fontWeight:\"bold\", color:\"#084\" }}>\r\n            {index === 0 && \"⬅️ Click to proceed\"}\r\n          </div>\r\n        </div>\r\n      ))}\r\n      <HashLink to=\"/\">Go back</HashLink>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { HashLink } from \"react-router-hash-link\";\r\nimport SpellsList from \"./SpellsList\";\r\n\r\nconst normalizeAnswer = (answer) => answer.replace(/\\s\\s+/g, \" \");\r\nconst repeatCharTimes = (c, times) => Array(times).fill(c).join(\"\");\r\n\r\nexport default function Level({ spells, setClearedLevel }) {\r\n  let { level } = useParams();\r\n  const tutorialDirections = [\r\n    \"\",\r\n    \"Click on a spell once to add its text to your answer.\",\r\n    \"You can also click on buttons in the problems to add their text. Uh oh! The answer box turned red. This means it's not correct.\",\r\n    \"No worries, we can click on the button again to remove this code.\",\r\n    \"Let's type in a space and quotes in the input. Still red.\",\r\n    \"OK, let's get a hint. Click on this button to remove all incorrect code and find out the next two symbols. This means we'll have to answer one more problem. Oh well, more practice for our wizard.\",\r\n    \"That's right, we forgot the open parenthesis.\",\r\n    \"Let's now click on the button again to reinstate the text.\",\r\n    \"Finally, let's add the remaining quotation marks and closing parenthesis to complete our answer. Yay, it turned green and the text disappeared, so this means we were correct!\",\r\n    \"That's all there is to it. Type in code and use the buttons to add code as you please. You can also get the full answer by clicking this button. But this means three more problems to solve.\"\r\n  ];\r\n  const [problemData, setProblemData] = React.useState({\r\n    type: \"foo\",\r\n    problems: [\r\n      {\r\n        description: \"Loading...\",\r\n        questionArgs: [],\r\n        answer: \"\",\r\n        answerArgs: []\r\n      }\r\n    ]\r\n  });\r\n  const [isCorrect, setIsCorrect] = React.useState(false);\r\n  const [problemNumber, setProblemNumber] = React.useState(0);\r\n  const [questionArgIndices, setQuestionArgIndices] = React.useState([]);\r\n  const [currentAnswer, setCurrentAnswer] = React.useState(\"\");\r\n  const [gotHint, setGotHint] = React.useState(false);\r\n  const [currentStreak, setCurrentStreak] = React.useState(0);\r\n  const [tutorialStep, setTutorialStep] = React.useState(level === \"1\" ? 1 : 0);\r\n  const [pointerPosition, setPointerPosition] = React.useState({ x: 0, y: 0 });\r\n  const selectedElement = React.useRef(null);\r\n\r\n  React.useEffect(() => {\r\n    if (selectedElement.current) {\r\n      handleCodeButtonClick(\r\n        selectedElement.current.innerText,\r\n        selectedElement.current\r\n      );\r\n    }\r\n  }, [selectedElement, tutorialStep]);\r\n\r\n  /*\r\n  React.useEffect(() => {\r\n    if (problemData.problems.length > 0 && tutorialStep === 1) {\r\n      //document.body.//appendChild(\"<div👆\r\n      setTimeout(\r\n        () =>\r\n          (document.getElementById(\"tutorial-directions\").style.width =\r\n            \"500px\"),\r\n        5000\r\n      );\r\n    }\r\n  }, [problemData, tutorialStep]);\r\n*/\r\n  React.useEffect(() => {\r\n    if (level != undefined) {\r\n      console.log(`level${level}.json`);\r\n      fetch(`/level${level}.json`)\r\n        .then((res) => res.json())\r\n        .then((data) => setProblemData(data));\r\n    }\r\n  }, [level]);\r\n  const [showAnswer, setShowAnswer] = React.useState(false);\r\n  const [numRemaining, setNumRemaining] = React.useState(Infinity);\r\n  React.useEffect(() => {\r\n    const questionNumber = Math.floor(\r\n      Math.random() * problemData.problems.length\r\n    );\r\n    const questionArgIndices = problemData.problems[\r\n      questionNumber\r\n    ].questionArgs.map((arr) => Math.floor(Math.random() * arr.length));\r\n    console.log(\"A\", questionNumber, questionArgIndices);\r\n    setProblemNumber(questionNumber);\r\n    setQuestionArgIndices(questionArgIndices);\r\n    if (numRemaining === Infinity && problemData?.type !== \"foo\") {\r\n      // loaded\r\n      console.log(problemData);\r\n      setNumRemaining(problemData.numToClear || 5);\r\n    } else if (numRemaining > 0 && isCorrect) {\r\n      setNumRemaining(numRemaining - 1);\r\n      setGotHint(false);\r\n    } else if (numRemaining === 0) {\r\n      setClearedLevel();\r\n    }\r\n    setIsCorrect(false);\r\n    setShowAnswer(false);\r\n  }, [problemData, isCorrect]);\r\n\r\n  const problemInfo = problemData.problems[problemNumber];\r\n  const questionArgs = problemInfo.questionArgs;\r\n  const answerArgs = problemInfo.answerArgs;\r\n  const expectedAnswer = problemInfo.answer\r\n    .replace(\r\n      /%([0-9]+)/g,\r\n      (_, a) => answerArgs[a - 1][questionArgIndices[a - 1]]\r\n    )\r\n    .replace(\r\n      /%([0-9]+)/g,\r\n      (_, a) => questionArgs[a - 1][questionArgIndices[a - 1]]\r\n    );\r\n  const expectedAnswerNormal = normalizeAnswer(expectedAnswer);\r\n  const currentAnswerNormal = normalizeAnswer(currentAnswer);\r\n  const handleCodeButtonClick = (code, ele) => {\r\n    //const code = e.target.value?.replace(/\\r|\\n/g, \"\");\r\n    // const singleLineCode = e.target.value?.replace(/\\r|\\n/g, \"\");\r\n    if (tutorialStep && ele?.getBoundingClientRect()) {\r\n      setPointerPosition({\r\n        x:\r\n          ele.getBoundingClientRect().x + ele.getBoundingClientRect().width / 2,\r\n        y:\r\n          ele.getBoundingClientRect().y + ele.getBoundingClientRect().height / 2\r\n      });\r\n    }\r\n    if (tutorialStep !== 4 && tutorialStep !== 5 && tutorialStep < 8) {\r\n      setCurrentAnswer(\r\n        currentAnswer.endsWith(code)\r\n          ? currentAnswer.slice(0, -code.length)\r\n          : currentAnswer + code\r\n      );\r\n    } else if (tutorialStep === 4) {\r\n      setCurrentAnswer(currentAnswer + ' \"');\r\n    } else if (tutorialStep === 5) {\r\n      console.log(\"5\", tutorialStep);\r\n      setCurrentAnswer(currentAnswer.slice(0, -2) + '(\"');\r\n    } else if (tutorialStep === 8) {\r\n      setCurrentAnswer(currentAnswer + '\")');\r\n    }\r\n  };\r\n  const description = problemInfo.description\r\n    .replace(\r\n      /%([0-9]+)/g,\r\n      (_, a) => questionArgs[a - 1][questionArgIndices[a - 1]]\r\n    )\r\n    .replace(\r\n      /___+/,\r\n      currentAnswerNormal.substring(0, 100) +\r\n        repeatCharTimes(\r\n          \"_\",\r\n          Math.max(expectedAnswerNormal.length - currentAnswerNormal.length, 0)\r\n        )\r\n    )\r\n    .split(/<pre>|<\\/pre>/g)\r\n    .map((item, index) => (index % 2 === 0 ? item : <pre>{item}</pre>))\r\n    .map((item, index) =>\r\n      typeof item === \"string\"\r\n        ? item\r\n            .split(/<h3>|<\\/h3>/g)\r\n            .map((item, index) => (index % 2 === 0 ? item : <h3>{item}</h3>))\r\n        : item\r\n    )\r\n    .flat()\r\n    .map((item, index) =>\r\n      typeof item === \"string\"\r\n        ? item.split(/<codeButton>|<\\/codeButton>/g).map((item, index) =>\r\n            index % 2 === 0 ? (\r\n              item\r\n            ) : (\r\n              <button\r\n                onClick={(e) =>\r\n                  handleCodeButtonClick(e.target.innerText, e.target)\r\n                }\r\n                ref={\r\n                  tutorialStep === 2 ||\r\n                  tutorialStep === 3 ||\r\n                  tutorialStep ===\r\n                    7 /*&&\r\n                  expectedAnswerNormal\r\n                    .substring(currentAnswerNormal.length)\r\n                    .startsWith(item) &&\r\n                  !currentAnswer.endsWith(item)*/\r\n                    ? selectedElement\r\n                    : null\r\n                }\r\n              >\r\n                {item}\r\n              </button>\r\n            )\r\n          )\r\n        : item\r\n    );\r\n\r\n  // React.useEffect(() => console.log(description), []);\r\n\r\n  React.useEffect(() => {\r\n    // const expectedAnswerNormal = normalizeAnswer(expectedAnswer);\r\n    // const actualAnswerNormal = normalizeAnswer(currentAnswer);\r\n    const answerInput = document.getElementById(\"answer\");\r\n\r\n    if (answerInput) {\r\n      answerInput.focus();\r\n      // Adapted from https://stackoverflow.com/a/48460773\r\n      //   - 40 is for 20px top/bottom padding\r\n      answerInput.style.height = \"\";\r\n      answerInput.style.height = answerInput.scrollHeight - 40 + \"px\";\r\n      if (\r\n        expectedAnswerNormal &&\r\n        expectedAnswerNormal === currentAnswerNormal\r\n      ) {\r\n        answerInput.style.backgroundColor = \"green\";\r\n        setTimeout(() => {\r\n          setIsCorrect(true);\r\n          setCurrentAnswer(\"\");\r\n          answerInput.style.backgroundColor = \"\";\r\n          if (!gotHint) {\r\n            setCurrentStreak(currentStreak + 1);\r\n          }\r\n        }, 1000);\r\n      } else if (!expectedAnswerNormal.startsWith(currentAnswerNormal)) {\r\n        answerInput.style.backgroundColor = \"red\";\r\n        setCurrentStreak(0);\r\n      } else {\r\n        answerInput.style.backgroundColor = \"\";\r\n      }\r\n    }\r\n  }, [currentAnswerNormal, expectedAnswerNormal, tutorialStep]);\r\n\r\n  return (\r\n    <div style={{ marginTop: \"45px\" }}>\r\n      <SpellsList\r\n        spells={spells}\r\n        setClicked={\r\n          tutorialStep === 1 &&\r\n          ((item) =>\r\n            expectedAnswerNormal.startsWith(item) &&\r\n            !currentAnswer.endsWith(item))\r\n        }\r\n        handler={(item, e) => {\r\n          // setCurrentAnswer(currentAnswer + item);\r\n          handleCodeButtonClick(item, e.target);\r\n        }}\r\n      />\r\n      {tutorialStep > 0 ? (\r\n        <div\r\n          style={{\r\n            position: \"absolute\",\r\n            top: pointerPosition.y,\r\n            left: pointerPosition.x - 10,\r\n            textAlign: \"left\"\r\n          }}\r\n        >\r\n          <span role=\"img\" ariaLabel=\"pointer\" style={{ fontSize: \"xx-large\" }}>\r\n            👆\r\n          </span>\r\n          <div\r\n            id=\"tutorial-directions\"\r\n            style={{\r\n              backgroundColor: \"rgb(255, 255, 205, 1)\",\r\n              /*width: \"100%\",*/\r\n              maxWidth: \"100px\",\r\n              minHeight: \"50px\",\r\n              overflow: \"hidden\",\r\n              position: \"relative\",\r\n              //right: \"50px\"\r\n              left: \"10px\",\r\n              top: \"-10px\",\r\n              padding: \"5px\",\r\n              transition: \"1s\"\r\n            }}\r\n          >\r\n            {tutorialDirections[tutorialStep]}\r\n            <button\r\n              onClick={() =>\r\n                setTutorialStep((tutorialStep + 1) % tutorialDirections.length)\r\n              }\r\n              style={{\r\n                marginTop: \"20px\",\r\n                fontWeight: \"strong\",\r\n                display: \"block\"\r\n              }}\r\n            >\r\n              Click{\" \"}\r\n              {tutorialStep < tutorialDirections.length - 1\r\n                ? \"for the next step\"\r\n                : \"to finish\"}\r\n            </button>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      {numRemaining > 0 ? (\r\n        <>\r\n          <h2>Number of Questions Remaining to Level Up: {numRemaining}</h2>\r\n          {description}\r\n          <label>\r\n            <h3>Answer:&nbsp;</h3>\r\n            <textarea\r\n              id=\"answer\"\r\n              readOnly={tutorialStep !== 0}\r\n              value={currentAnswer}\r\n              cols={40}\r\n              rows={1}\r\n              ref={\r\n                tutorialStep === 4 || tutorialStep === 8\r\n                  ? selectedElement\r\n                  : null\r\n              }\r\n              style={{\r\n                maxWidth: \"95%\",\r\n                //background:\r\n                //  \"url('https://upload.wikimedia.org/wikipedia/commons/3/36/Fire-animation.gif')\",\r\n                //backgroundSize: \"contain\",\r\n                backgroundImage: currentStreak >= 3 && \"url('/fire.gif')\",\r\n                backgroundSize: \"10% 20px\",\r\n                //backgroundPosition: \"bottom\",\r\n                //backgroundRepeat: \"no-repeat\",\r\n                backgroundRepeat: \"repeat-x\",\r\n                backgroundPosition: \"100% 100%\",\r\n                //backgroundRepeat: \"no-repeat\",\r\n                fontSize: \"xx-large\",\r\n                fontWeight: \"bold\",\r\n                //color: \"green\",\r\n                padding: \"20px 5px\",\r\n                fontFamily: \"courier, monospace\",\r\n                resize: \"none\",\r\n                borderRadius: \"10px\"\r\n              }}\r\n              onChange={(e) => {\r\n                //console.log(e.target.style.height);\r\n                //e.target.style.height = \"\";\r\n                //e.target.style.height = e.target.scrollHeight - 40 + \"px\";\r\n                /*\r\n                const expectedAnswerNormal = expectedAnswer.replace(\r\n                  /\\s\\s+/g,\r\n                  \" \"\r\n                );\r\n                const actualAnswerNormal = e.target.value.replace(\r\n                  /\\s\\s+/g,\r\n                  \" \"\r\n                );\r\n\r\n                if (expectedAnswerNormal === actualAnswerNormal) {\r\n                  e.target.style.backgroundColor = \"green\";\r\n                  setTimeout(() => {\r\n                    setIsCorrect(true);\r\n                    setCurrentAnswer(\"\");\r\n                    e.target.style.backgroundColor = \"\";\r\n                  }, 1000);\r\n                } else if (\r\n                  !expectedAnswerNormal.startsWith(actualAnswerNormal)\r\n                ) {\r\n                  e.target.style.backgroundColor = \"red\";\r\n                } else {\r\n                  e.target.style.backgroundColor = \"\";\r\n                }\r\n                */\r\n                setCurrentAnswer(e.target.value, e.target);\r\n              }}\r\n              autoFocus\r\n            />\r\n          </label>\r\n          <br />\r\n          <br />\r\n          <button\r\n            onClick={() => {\r\n              const expectedAnswerNormal = normalizeAnswer(expectedAnswer);\r\n              const actualAnswerNormal = normalizeAnswer(currentAnswer);\r\n              const indexOfDivergence = Array.from(\r\n                expectedAnswerNormal\r\n              ).findIndex((c, index) => c !== actualAnswerNormal[index]);\r\n\r\n              if (indexOfDivergence !== -1) {\r\n                setCurrentAnswer(\r\n                  expectedAnswerNormal.substring(0, indexOfDivergence + 2)\r\n                );\r\n                setNumRemaining(numRemaining + 1);\r\n              }\r\n              setCurrentStreak(0);\r\n            }}\r\n            style={{ marginRight: \"5px\" }}\r\n            ref={tutorialStep === 5 ? selectedElement : null}\r\n          >\r\n            Fix current answer and 2 character hint (+1 problem to solve)\r\n          </button>\r\n          <br />\r\n          <br />\r\n          <button\r\n            onClick={() => {\r\n              setShowAnswer(!showAnswer);\r\n              setGotHint(true);\r\n              if (!gotHint) {\r\n                setNumRemaining(numRemaining + 3);\r\n                setCurrentStreak(0);\r\n              }\r\n            }}\r\n            ref={tutorialStep === 9 ? selectedElement : null}\r\n          >\r\n            Click to{\" \"}\r\n            {showAnswer ? \"hide answer\" : \"show answer (+3 problems to solve)\"}\r\n          </button>\r\n          <div style={{ display: showAnswer ? \"block\" : \"none\" }}>\r\n            {expectedAnswer}\r\n          </div>\r\n          <br />\r\n          <br />\r\n          <p>\r\n            <HashLink\r\n              to=\"/map\"\r\n              onClick={(e) =>\r\n                window.confirm(\r\n                  \"Are you sure? If you return to the map, you'll need to start this level from the beginning.\"\r\n                ) || e.preventDefault()\r\n              }\r\n            >\r\n              Quit, and go back to the level map!\r\n            </HashLink>\r\n          </p>\r\n        </>\r\n      ) : (\r\n        <>\r\n          <h1 style={{ color: \"green\" }}>SUCCESS! Leveled Up!</h1>\r\n          <HashLink to=\"/map\">Go back to the map!</HashLink>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\n","export default __webpack_public_path__ + \"static/media/open-treasure-chest-gold.svg.8c7a6d8b.png\";","import React from \"react\";\r\nimport SpellsList from \"./SpellsList\";\r\nimport CodeSnippetRunner from \"./CodeSnippetRunner\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { HashLink } from \"react-router-hash-link\";\r\nimport closedTreasureChest from \"../assets/closed-treasure-chest.png\";\r\nimport openTreasureChestGold from \"../assets/open-treasure-chest-gold.svg.png\";\r\n\r\nexport default function Treasure({ spells, setSpells, isOpened, setOpened }) {\r\n  const { level = 0 } = useParams();\r\n  const opened = isOpened(level);\r\n  const [treasureData, setTreasureData] = React.useState(null);\r\n  React.useEffect(() => {\r\n    console.log(`/treasure${level}.json`);\r\n    fetch(`/treasure${level}.json`)\r\n      .then((res) => res.json())\r\n      .then((data) => setTreasureData(data));\r\n  }, [level]);\r\n  // console.log(treasureData);\r\n  return (\r\n    <>\r\n      <SpellsList spells={spells} />\r\n      {/*\r\n      <span style={{ backgroundColor: \"black\", color: \"white\" }}>\r\n        XP 0 Block inventory\r\n      </span>\r\n      */}\r\n      {!opened ? (\r\n        <>\r\n          <h1>{treasureData?.closedHeading}</h1>\r\n          <img\r\n            src={closedTreasureChest}\r\n            style={{ width: \"200px\", height: \"auto\" }}\r\n            alt=\"treasure\"\r\n            onClick={(e) => {\r\n              if (treasureData) {\r\n                setOpened(true);\r\n                if (!spells.includes(treasureData?.treasure)) {\r\n                  setSpells(spells.concat(treasureData?.treasure));\r\n                }\r\n              }\r\n            }}\r\n          />\r\n          <h2>Click the box above to open!</h2>\r\n        </>\r\n      ) : (\r\n        <>\r\n          {/*<p>You can use this spell to output text to the screen.</p>*/}\r\n          <h1>{treasureData?.openedHeading}</h1>\r\n          <p>\r\n            <img\r\n              src={openTreasureChestGold}\r\n              alt=\"Open treasure chest with gold\"\r\n              width=\"100\"\r\n            />\r\n          </p>\r\n          <p>{treasureData?.description}</p>\r\n          {treasureData?.usage && (\r\n            <>\r\n              <h3>Example usage:</h3>\r\n              <pre>{treasureData.usage}</pre>\r\n            </>\r\n          )}\r\n          {treasureData?.output && (\r\n            <>\r\n              <h3>Output from spell:</h3>\r\n              {/*<pre>{treasureData.output}</pre>*/}\r\n              <CodeSnippetRunner code={treasureData.usage} />\r\n            </>\r\n          )}\r\n          {/*<button onClick={() => setOpened(false)}>print</button>*/}\r\n          <HashLink to=\"/map\">Go forward</HashLink>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\nimport \"./styles.css\";\nimport closedTreasureChest from \"./assets/closed-treasure-chest.png\";\nimport SpellsList from \"./components/SpellsList\";\nimport LevelMap from \"./components/LevelMap\";\nimport Level from \"./components/Level\";\nimport Treasure from \"./components/Treasure\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\nimport { HashLink } from \"react-router-hash-link\";\n\nexport default function App() {\n  const isOpened = (index) => {\n    return (\n      levels.findIndex(\n        (item) => item.type === \"treasure\" && item.num === parseInt(index, 10)\n      ) < currentLevel\n    );\n  };\n  const [spells, setSpells] = React.useState(\n    JSON.parse(localStorage.getItem(\"spells\")) || []\n  );\n  const [currentLevel, setLevel] = React.useState(\n    parseInt(localStorage.getItem(\"currentLevel\"), 10) || 0\n  );\n  const [levels, setLevels] = React.useState(\n    [\n      { type: \"treasure\", num: 0 },\n      { type: \"level\", num: 1 },\n      { type: \"treasure\", num: 1 },\n      { type: \"level\", num: 2 },\n      { type: \"treasure\", num: 2 },\n      { type: \"level\", num: 3 },\n      { type: \"treasure\", num: 3 },\n      { type: \"level\", num: 4 },\n      { type: \"treasure\", num: 4 },\n      { type: \"level\", num: 5 },\n      { type: \"treasure\", num: 5 }\n      /*{ type: \"level\", num: 6 },\n      { type: \"treasure\", num: 6 },\n      { type: \"level\", num: 7 },\n      { type: \"treasure\", num: 7 }*/\n    ].map((item, index) => ({ ...item, index }))\n  );\n\n  React.useEffect(() => {\n    localStorage.setItem(\"spells\", JSON.stringify(spells));\n  }, [spells]);\n\n  function setClearedLevel() {\n    console.log(\"CL\", currentLevel);\n    localStorage.setItem(\"currentLevel\", currentLevel + 1);\n    setLevel(currentLevel + 1);\n  }\n\n  return (\n    <div className=\"App\" style={{ marginTop: \"45px\" }}>\n      <BrowserRouter>\n        <Routes>\n          <Route\n            path=\"/\"\n            exact\n            element={\n              <Treasure\n                spells={spells}\n                setSpells={setSpells}\n                isOpened={isOpened}\n                setOpened={setClearedLevel}\n              />\n            }\n          />\n          <Route\n            path=\"/codejaadoo\"\n            exact\n            element={\n              <Treasure\n                spells={spells}\n                setSpells={setSpells}\n                isOpened={isOpened}\n                setOpened={setClearedLevel}\n              />\n            }\n          />\n          <Route\n            path=\"/map\"\n            exact\n            element={\n              <LevelMap\n                levels={levels}\n                currentLevel={currentLevel}\n                spells={spells}\n              />\n            }\n          />\n          <Route\n            path=\"/level/:level\"\n            exact\n            element={\n              <Level spells={spells} setClearedLevel={setClearedLevel} />\n            }\n          />\n          <Route\n            path=\"/treasure/:level\"\n            exact\n            element={\n              <Treasure\n                spells={spells}\n                setSpells={setSpells}\n                isOpened={isOpened}\n                setOpened={setClearedLevel}\n              />\n            }\n          />\n        </Routes>\n      </BrowserRouter>\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n"],"sourceRoot":""}