{"version":3,"sources":["components/CodeSnippetRunner/index.js","assets/closed-treasure-chest.png","components/SpellsList.js","assets/open-treasure-chest-empty.svg.png","assets/lock.png","assets/wizard-walking-forward.gif","components/LevelMap.js","components/Level.js","assets/open-treasure-chest-gold.svg.png","components/Treasure.js","App.js","index.js"],"names":["CodeSnippetRunner","code","printFunctionStr","console","log","id","onClick","eval","SpellsList","spells","handler","style","position","top","left","width","backgroundColor","overflow","padding","whiteSpace","map","item","e","margin","LevelMap","level","currentLevel","levels","completedLevels","slice","remainingLevels","React","useState","selectedLevel","setSelectedLevel","index","borderRadius","to","type","num","color","textDecoration","src","lock","alt","marginTop","height","textAlign","marginLeft","marginRight","currentTarget","stopPropagation","openTreasureChest","wizard","closedTreasureChest","normalizeAnswer","answer","replace","Level","setClearedLevel","useParams","problems","description","questionArgs","answerArgs","problemData","setProblemData","isCorrect","setIsCorrect","problemNumber","setProblemNumber","questionArgIndices","setQuestionArgIndices","currentAnswer","setCurrentAnswer","gotHint","setGotHint","useEffect","undefined","fetch","then","res","json","data","showAnswer","setShowAnswer","Infinity","numRemaining","setNumRemaining","questionNumber","Math","floor","random","length","arr","numToClear","c","times","problemInfo","expectedAnswer","_","a","expectedAnswerNormal","currentAnswerNormal","substring","max","Array","fill","join","split","answerInput","document","getElementById","setTimeout","startsWith","actualAnswerNormal","indexOfDivergence","from","findIndex","display","value","size","maxWidth","onChange","target","window","confirm","preventDefault","Treasure","setSpells","isOpened","setOpened","opened","treasureData","setTreasureData","openedHeading","openTreasureChestGold","usage","output","closedHeading","includes","treasure","concat","App","parseInt","JSON","parse","localStorage","getItem","setLevel","setItem","stringify","className","path","exact","element","rootElement","createRoot","render"],"mappings":"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","file":"static/js/main.63a4ac2f.chunk.js","sourcesContent":["import \"./styles.css\";\r\n\r\nexport default function CodeSnippetRunner({ code }) {\r\n  const printFunctionStr = `const print = (...items) => {\r\n      Array.prototype.forEach.call(items, (item) => {\r\n      if(item instanceof Array) {\r\n        item = \"[ \" + item.map((a) => {\r\n          if(typeof a === \"string\") { return \"'\" + a.replace(\"'\", \"\\\\'\") + \"'\"; }\r\n          else { return a; }\r\n        }).reduce((acc, a) => {\r\n          return acc + \", \" + a;\r\n        }) + \" ]\";\r\n      }\r\n      document.getElementById(\"output\").appendChild(document.createTextNode(item));\r\n      document.getElementById(\"output\").appendChild(document.createTextNode(\" \"));\r\n    });\r\n    document.getElementById(\"output\").appendChild(document.createTextNode(\"\\\\n\"));\r\n  };`;\r\n  console.log(printFunctionStr + \"\\n\" + code);\r\n  return (\r\n    <div id=\"code-runner\">\r\n      <button onClick={() => eval(printFunctionStr + \"\\n\" + code)}>\r\n        Run Code\r\n      </button>\r\n      <pre id=\"output\"></pre>\r\n    </div>\r\n  );\r\n}\r\n","export default __webpack_public_path__ + \"static/media/closed-treasure-chest.32351da1.png\";","export default function SpellsList({ spells, handler }) {\r\n  return (\r\n    <div\r\n      style={{\r\n        position: \"fixed\",\r\n        top: 0,\r\n        left: 0,\r\n        width: \"100%\",\r\n        backgroundColor: \"rgba(75,0,255,0.5)\",\r\n        overflow: \"auto\",\r\n        padding: \"5px\"\r\n      }}\r\n    >\r\n      <span style={{ whiteSpace: \"nowrap\" }}>\r\n        Available Code Spells:\r\n        {(spells || []).map((item) => (\r\n          <button\r\n            onClick={(e) => handler && handler(item, e)}\r\n            style={{ margin: \"5px 5px\" }}\r\n            key={item}\r\n          >\r\n            {item}\r\n          </button>\r\n        ))}\r\n      </span>\r\n    </div>\r\n  );\r\n}\r\n","export default __webpack_public_path__ + \"static/media/open-treasure-chest-empty.svg.2a02895f.png\";","export default __webpack_public_path__ + \"static/media/lock.55b3f1d2.png\";","export default __webpack_public_path__ + \"static/media/wizard-walking-forward.f140a331.gif\";","import React from \"react\";\r\nimport closedTreasureChest from \"../assets/closed-treasure-chest.png\";\r\nimport openTreasureChest from \"../assets/open-treasure-chest-empty.svg.png\";\r\nimport lock from \"../assets/lock.png\";\r\nimport wizard from \"../assets/wizard-walking-forward.gif\";\r\nimport { HashLink } from \"react-router-hash-link\";\r\nimport SpellsList from \"./SpellsList\";\r\nexport default function LevelMap({ currentLevel, levels, spells }) {\r\n  const completedLevels = levels?.slice(0, currentLevel) || [];\r\n  const remainingLevels = levels?.slice(currentLevel) || [];\r\n  const [selectedLevel, setSelectedLevel] = React.useState(null);\r\n  const isLevelAccessible = (level) => level.index <= currentLevel;\r\n  return (\r\n    <div\r\n      style={\r\n        {\r\n          /*display: \"grid\",\r\n        gridTemplateColumns: \"100px 100px 100px\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\"*/\r\n        }\r\n      }\r\n      onClick={() => setSelectedLevel(null)}\r\n    >\r\n      <SpellsList spells={spells || [\"print\"]} />\r\n      {selectedLevel != null ? (\r\n        isLevelAccessible(selectedLevel) ? (\r\n          <div\r\n            style={{\r\n              position: \"fixed\",\r\n              width: \"100%\",\r\n              /*minHeight: \"100px\",*/\r\n              backgroundColor: \"rgba(0, 0, 255, 0.75)\",\r\n              borderRadius: \"20px\",\r\n              padding: \"50px 0\"\r\n            }}\r\n          >\r\n            <HashLink\r\n              to={`/${\r\n                selectedLevel.type === \"treasure\"\r\n                  ? `treasure/${selectedLevel.num}`\r\n                  : `level/${selectedLevel.num}`\r\n              }`}\r\n              style={{ color: \"black\", textDecoration: \"none\" }}\r\n            >\r\n              {selectedLevel.type === \"treasure\"\r\n                ? `Click to collect treasure`\r\n                : `Click to Start Level ${selectedLevel.num}`}\r\n            </HashLink>\r\n          </div>\r\n        ) : (\r\n          <div\r\n            style={{\r\n              position: \"fixed\",\r\n              width: \"100%\",\r\n              /*minHeight: \"100px\",*/\r\n              backgroundColor: \"rgba(200, 200, 200, 0.5)\",\r\n              borderRadius: \"20px\",\r\n              padding: \"10px 0\"\r\n            }}\r\n          >\r\n            <img\r\n              src={lock}\r\n              alt=\"Locked\"\r\n              width=\"100\"\r\n            />\r\n            <p style={{ marginTop: 0 }}>\r\n              You need to successfully complete previous levels before you can\r\n              access this.\r\n            </p>\r\n          </div>\r\n        )\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      {completedLevels.map((level, index) => (\r\n        <div\r\n          style={{\r\n            borderRadius: \"30px\",\r\n            width: \"50px\",\r\n            height: \"50px\",\r\n            backgroundColor: \"gold\",\r\n            textAlign: \"center\",\r\n            marginLeft: \"auto\",\r\n            marginRight: \"auto\",\r\n            marginTop: \"10px\"\r\n          }}\r\n          id={level.index}\r\n          onClick={(e) => {\r\n            console.log(e.currentTarget.id);\r\n            setSelectedLevel(level);\r\n            e.stopPropagation();\r\n          }}\r\n        >\r\n          {level.type === \"treasure\" ? (\r\n            <img\r\n              src={openTreasureChest}\r\n              width=\"40\"\r\n              alt=\"open treasure chest\"\r\n            />\r\n          ) : (\r\n            `Level ${level.num}`\r\n          )}\r\n        </div>\r\n      ))}\r\n      <div>\r\n        <img\r\n          src={wizard}\r\n          alt=\"The wizard walks forward!\"\r\n          width=\"53\"\r\n        />\r\n      </div>\r\n      {remainingLevels.map((level, index) => (\r\n        <div\r\n          style={{\r\n            borderRadius: \"30px\",\r\n            width: \"50px\",\r\n            height: \"50px\",\r\n            backgroundColor: \"#dddddd\",\r\n            textAlign: \"center\",\r\n            marginLeft: \"auto\",\r\n            marginRight: \"auto\",\r\n            marginTop: \"10px\"\r\n          }}\r\n          id={level.index}\r\n          onClick={(e) => {\r\n            console.log(e.currentTarget.id);\r\n            setSelectedLevel(level);\r\n            e.stopPropagation();\r\n          }}\r\n        >\r\n          {level.type === \"treasure\" ? (\r\n            <img\r\n              src={closedTreasureChest}\r\n              width=\"40\"\r\n              alt=\"open treasure chest\"\r\n            />\r\n          ) : (\r\n            <span>{`Level ${level?.num}`}</span>\r\n          )}\r\n        </div>\r\n      ))}\r\n      <HashLink to=\"/\">Go back</HashLink>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { HashLink } from \"react-router-hash-link\";\r\nimport SpellsList from \"./SpellsList\";\r\n\r\nconst normalizeAnswer = (answer) => answer.replace(/\\s\\s+/g, \" \");\r\nconst repeatCharTimes = (c, times) => Array(times).fill(c).join(\"\");\r\n\r\nexport default function Level({ spells, setClearedLevel }) {\r\n  let { level } = useParams();\r\n  const [problemData, setProblemData] = React.useState({\r\n    type: \"foo\",\r\n    problems: [\r\n      {\r\n        description: \"Loading...\",\r\n        questionArgs: [],\r\n        answer: \"\",\r\n        answerArgs: []\r\n      }\r\n    ]\r\n  });\r\n  const [isCorrect, setIsCorrect] = React.useState(false);\r\n  const [problemNumber, setProblemNumber] = React.useState(0);\r\n  const [questionArgIndices, setQuestionArgIndices] = React.useState([]);\r\n  const [currentAnswer, setCurrentAnswer] = React.useState(\"\");\r\n  const [gotHint, setGotHint] = React.useState(false);\r\n  React.useEffect(() => {\r\n    if (level != undefined) {\r\n      console.log(`level${level}.json`);\r\n      fetch(`/codejaadoo/level${level}.json`)\r\n        .then((res) => res.json())\r\n        .then((data) => setProblemData(data));\r\n    }\r\n  }, [level]);\r\n  const [showAnswer, setShowAnswer] = React.useState(false);\r\n  const [numRemaining, setNumRemaining] = React.useState(Infinity);\r\n  React.useEffect(() => {\r\n    const questionNumber = Math.floor(\r\n      Math.random() * problemData.problems.length\r\n    );\r\n    const questionArgIndices = problemData.problems[\r\n      questionNumber\r\n    ].questionArgs.map((arr) => Math.floor(Math.random() * arr.length));\r\n    console.log(\"A\", questionNumber, questionArgIndices);\r\n    setProblemNumber(questionNumber);\r\n    setQuestionArgIndices(questionArgIndices);\r\n    if (numRemaining === Infinity && problemData?.type !== \"foo\") {\r\n      // loaded\r\n      console.log(problemData);\r\n      setNumRemaining(problemData.numToClear || 5);\r\n    } else if (numRemaining > 0 && isCorrect) {\r\n      setNumRemaining(numRemaining - 1);\r\n      setGotHint(false);\r\n    } else if (numRemaining === 0) {\r\n      setClearedLevel();\r\n    }\r\n    setIsCorrect(false);\r\n    setShowAnswer(false);\r\n  }, [problemData, isCorrect]);\r\n\r\n  const problemInfo = problemData.problems[problemNumber];\r\n  const questionArgs = problemInfo.questionArgs;\r\n  const answerArgs = problemInfo.answerArgs;\r\n  const expectedAnswer = problemInfo.answer\r\n    .replace(\r\n      /%([0-9]+)/g,\r\n      (_, a) => answerArgs[a - 1][questionArgIndices[a - 1]]\r\n    )\r\n    .replace(\r\n      /%([0-9]+)/g,\r\n      (_, a) => questionArgs[a - 1][questionArgIndices[a - 1]]\r\n    );\r\n  const expectedAnswerNormal = normalizeAnswer(expectedAnswer);\r\n  const currentAnswerNormal = normalizeAnswer(currentAnswer);\r\n  const description = problemInfo.description\r\n    .replace(\r\n      /%([0-9]+)/g,\r\n      (_, a) => questionArgs[a - 1][questionArgIndices[a - 1]]\r\n    )\r\n    .replace(\r\n      /___+/,\r\n      currentAnswerNormal.substring(0, 100) +\r\n        repeatCharTimes(\r\n          \"_\",\r\n          Math.max(expectedAnswerNormal.length - currentAnswerNormal.length, 0)\r\n        )\r\n    )\r\n    .split(/<pre>|<\\/pre>/g)\r\n    .map((item, index) => (index % 2 === 0 ? item : <pre>{item}</pre>))\r\n    .map((item, index) =>\r\n      typeof item === \"string\"\r\n        ? item\r\n            .split(/<h3>|<\\/h3>/g)\r\n            .map((item, index) => (index % 2 === 0 ? item : <h3>{item}</h3>))\r\n        : item\r\n    );\r\n\r\n  React.useEffect(() => {\r\n    // const expectedAnswerNormal = normalizeAnswer(expectedAnswer);\r\n    // const actualAnswerNormal = normalizeAnswer(currentAnswer);\r\n    const answerInput = document.getElementById(\"answer\");\r\n\r\n    if (answerInput) {\r\n      if (expectedAnswerNormal === currentAnswerNormal) {\r\n        answerInput.style.backgroundColor = \"green\";\r\n        setTimeout(() => {\r\n          setIsCorrect(true);\r\n          setCurrentAnswer(\"\");\r\n          answerInput.style.backgroundColor = \"\";\r\n        }, 1000);\r\n      } else if (!expectedAnswerNormal.startsWith(currentAnswerNormal)) {\r\n        answerInput.style.backgroundColor = \"red\";\r\n      } else {\r\n        answerInput.style.backgroundColor = \"\";\r\n      }\r\n    }\r\n  }, [currentAnswerNormal, expectedAnswerNormal]);\r\n\r\n  return (\r\n    <div style={{ marginTop: \"45px\" }}>\r\n      <SpellsList\r\n        spells={spells}\r\n        handler={(item) => {\r\n          setCurrentAnswer(currentAnswer + item);\r\n        }}\r\n      />\r\n      {numRemaining > 0 ? (\r\n        <>\r\n          <h2>Number of Questions Remaining to Level Up: {numRemaining}</h2>\r\n          {description}\r\n          <br />\r\n          <button\r\n            onClick={() => {\r\n              const expectedAnswerNormal = normalizeAnswer(expectedAnswer);\r\n              const actualAnswerNormal = normalizeAnswer(currentAnswer);\r\n              const indexOfDivergence = Array.from(\r\n                expectedAnswerNormal\r\n              ).findIndex((c, index) => c !== actualAnswerNormal[index]);\r\n\r\n              if (indexOfDivergence !== -1) {\r\n                setCurrentAnswer(\r\n                  expectedAnswerNormal.substring(0, indexOfDivergence + 2)\r\n                );\r\n                setNumRemaining(numRemaining + 1);\r\n              }\r\n            }}\r\n            style={{ marginRight: \"5px\" }}\r\n          >\r\n            Fix current answer and 2 character hint (+1 problem to solve)\r\n          </button>\r\n          <button\r\n            onClick={() => {\r\n              setShowAnswer(!showAnswer);\r\n              setGotHint(true);\r\n              if (!gotHint) {\r\n                setNumRemaining(numRemaining + 3);\r\n              }\r\n            }}\r\n          >\r\n            Click to{\" \"}\r\n            {showAnswer ? \"hide answer\" : \"show answer (+3 problems to solve)\"}\r\n          </button>\r\n          <div style={{ display: showAnswer ? \"block\" : \"none\" }}>\r\n            {expectedAnswer}\r\n          </div>\r\n          <br />\r\n          <br />\r\n          <label>\r\n            Answer:&nbsp;\r\n            <input\r\n              id=\"answer\"\r\n              value={currentAnswer}\r\n              size={50}\r\n              style={{ maxWidth: \"100%\" }}\r\n              onChange={(e) => {\r\n                /*\r\n                const expectedAnswerNormal = expectedAnswer.replace(\r\n                  /\\s\\s+/g,\r\n                  \" \"\r\n                );\r\n                const actualAnswerNormal = e.target.value.replace(\r\n                  /\\s\\s+/g,\r\n                  \" \"\r\n                );\r\n\r\n                if (expectedAnswerNormal === actualAnswerNormal) {\r\n                  e.target.style.backgroundColor = \"green\";\r\n                  setTimeout(() => {\r\n                    setIsCorrect(true);\r\n                    setCurrentAnswer(\"\");\r\n                    e.target.style.backgroundColor = \"\";\r\n                  }, 1000);\r\n                } else if (\r\n                  !expectedAnswerNormal.startsWith(actualAnswerNormal)\r\n                ) {\r\n                  e.target.style.backgroundColor = \"red\";\r\n                } else {\r\n                  e.target.style.backgroundColor = \"\";\r\n                }\r\n                */\r\n                setCurrentAnswer(e.target.value);\r\n              }}\r\n            />\r\n          </label>\r\n          <p>\r\n            <HashLink\r\n              to=\"/map\"\r\n              onClick={(e) =>\r\n                window.confirm(\r\n                  \"Are you sure? If you return to the map, you'll need to start this level from the beginning.\"\r\n                ) || e.preventDefault()\r\n              }\r\n            >\r\n              Quit, and go back to the level map!\r\n            </HashLink>\r\n          </p>\r\n        </>\r\n      ) : (\r\n        <>\r\n          <h1 style={{ color: \"green\" }}>SUCCESS! Leveled Up!</h1>\r\n          <HashLink to=\"/map\">Go back to the map!</HashLink>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","export default __webpack_public_path__ + \"static/media/open-treasure-chest-gold.svg.8c7a6d8b.png\";","import React from \"react\";\r\nimport SpellsList from \"./SpellsList\";\r\nimport CodeSnippetRunner from \"./CodeSnippetRunner\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { HashLink } from \"react-router-hash-link\";\r\nimport closedTreasureChest from \"../assets/closed-treasure-chest.png\";\r\nimport openTreasureChestGold from \"../assets/open-treasure-chest-gold.svg.png\";\r\n\r\nexport default function Treasure({ spells, setSpells, isOpened, setOpened }) {\r\n  const { level = 0 } = useParams();\r\n  const opened = isOpened(level);\r\n  const [treasureData, setTreasureData] = React.useState(null);\r\n  React.useEffect(() => {\r\n    console.log(`/treasure${level}.json`);\r\n    fetch(`/codejaadoo/treasure${level}.json`)\r\n      .then((res) => res.json())\r\n      .then((data) => setTreasureData(data));\r\n  }, [level]);\r\n  // console.log(treasureData);\r\n  return (\r\n    <>\r\n      <SpellsList spells={spells} />\r\n      {/*\r\n      <span style={{ backgroundColor: \"black\", color: \"white\" }}>\r\n        XP 0 Block inventory\r\n      </span>\r\n      */}\r\n      {!opened ? (\r\n        <>\r\n          <h1>{treasureData?.closedHeading}</h1>\r\n          <img\r\n            src={closedTreasureChest}\r\n            style={{ width: \"200px\", height: \"auto\" }}\r\n            alt=\"treasure\"\r\n            onClick={(e) => {\r\n              if (treasureData) {\r\n                setOpened(true);\r\n                if (!spells.includes(treasureData?.treasure)) {\r\n                  setSpells(spells.concat(treasureData?.treasure));\r\n                }\r\n              }\r\n            }}\r\n          />\r\n          <h2>Click the box above to open!</h2>\r\n        </>\r\n      ) : (\r\n        <>\r\n          {/*<p>You can use this spell to output text to the screen.</p>*/}\r\n          <h1>{treasureData?.openedHeading}</h1>\r\n          <p>\r\n            <img\r\n              src={openTreasureChestGold}\r\n              alt=\"Open treasure chest with gold\"\r\n              width=\"100\"\r\n            />\r\n          </p>\r\n          <p>{treasureData?.description}</p>\r\n          {treasureData?.usage && (\r\n            <>\r\n              <h3>Example usage:</h3>\r\n              <pre>{treasureData.usage}</pre>\r\n            </>\r\n          )}\r\n          {treasureData?.output && (\r\n            <>\r\n              <h3>Output from spell:</h3>\r\n              {/*<pre>{treasureData.output}</pre>*/}\r\n              <CodeSnippetRunner code={treasureData.usage} />\r\n            </>\r\n          )}\r\n          {/*<button onClick={() => setOpened(false)}>print</button>*/}\r\n          <HashLink to=\"/map\">Go forward</HashLink>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\nimport \"./styles.css\";\nimport closedTreasureChest from \"./assets/closed-treasure-chest.png\";\nimport SpellsList from \"./components/SpellsList\";\nimport LevelMap from \"./components/LevelMap\";\nimport Level from \"./components/Level\";\nimport Treasure from \"./components/Treasure\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\nimport { HashLink } from \"react-router-hash-link\";\n\nexport default function App() {\n  const isOpened = (index) => {\n    return (\n      levels.findIndex(\n        (item) => item.type === \"treasure\" && item.num === parseInt(index, 10)\n      ) < currentLevel\n    );\n  };\n  const [spells, setSpells] = React.useState(\n    JSON.parse(localStorage.getItem(\"spells\")) || []\n  );\n  const [currentLevel, setLevel] = React.useState(\n    parseInt(localStorage.getItem(\"currentLevel\"), 10) || 0\n  );\n  const [levels, setLevels] = React.useState(\n    [\n      { type: \"treasure\", num: 0 },\n      { type: \"level\", num: 1 },\n      { type: \"treasure\", num: 1 },\n      { type: \"level\", num: 2 },\n      { type: \"treasure\", num: 2 },\n      { type: \"level\", num: 3 },\n      { type: \"treasure\", num: 3 },\n      { type: \"level\", num: 4 },\n      { type: \"treasure\", num: 4 },\n      { type: \"level\", num: 5 },\n      { type: \"treasure\", num: 5 }\n      /*{ type: \"level\", num: 6 },\n      { type: \"treasure\", num: 6 },\n      { type: \"level\", num: 7 },\n      { type: \"treasure\", num: 7 }*/\n    ].map((item, index) => ({ ...item, index }))\n  );\n\n  React.useEffect(() => {\n    localStorage.setItem(\"spells\", JSON.stringify(spells));\n  }, [spells]);\n\n  function setClearedLevel() {\n    console.log(\"CL\", currentLevel);\n    localStorage.setItem(\"currentLevel\", currentLevel + 1);\n    setLevel(currentLevel + 1);\n  }\n\n  return (\n    <div className=\"App\" style={{ marginTop: \"45px\" }}>\n      <BrowserRouter>\n        <Routes>\n          <Route\n            path=\"/\"\n            exact\n            element={\n              <Treasure\n                spells={spells}\n                setSpells={setSpells}\n                isOpened={isOpened}\n                setOpened={setClearedLevel}\n              />\n            }\n          />\n          <Route\n            path=\"/codejaadoo\"\n            exact\n            element={\n              <Treasure\n                spells={spells}\n                setSpells={setSpells}\n                isOpened={isOpened}\n                setOpened={setClearedLevel}\n              />\n            }\n          />\n          <Route\n            path=\"/map\"\n            exact\n            element={\n              <LevelMap\n                levels={levels}\n                currentLevel={currentLevel}\n                spells={spells}\n              />\n            }\n          />\n          <Route\n            path=\"/level/:level\"\n            exact\n            element={\n              <Level spells={spells} setClearedLevel={setClearedLevel} />\n            }\n          />\n          <Route\n            path=\"/treasure/:level\"\n            exact\n            element={\n              <Treasure\n                spells={spells}\n                setSpells={setSpells}\n                isOpened={isOpened}\n                setOpened={setClearedLevel}\n              />\n            }\n          />\n        </Routes>\n      </BrowserRouter>\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n"],"sourceRoot":""}