{"version":3,"sources":["components/CodeSnippetRunner/index.js","assets/closed-treasure-chest.png","components/SpellsList.js","assets/open-treasure-chest-empty.svg.png","assets/lock.png","assets/wizard-walking-forward.gif","components/LevelMap.js","components/AnswerInput/index.js","components/Level.js","assets/open-treasure-chest-gold.svg.png","components/Treasure.js","App.js","index.js"],"names":["CodeSnippetRunner","code","runCallback","printFunctionStr","console","log","id","onClick","eval","SpellsList","spells","handler","setClicked","selectedElement","React","useRef","useEffect","forEach","item","target","current","style","position","top","left","width","backgroundColor","overflow","padding","whiteSpace","map","e","margin","ref","LevelMap","level","currentLevel","levels","completedLevels","slice","remainingLevels","useState","selectedLevel","setSelectedLevel","index","borderRadius","to","type","num","color","textDecoration","display","justifyContent","src","lock","alt","marginTop","height","textAlign","marginLeft","marginRight","currentTarget","stopPropagation","openTreasureChest","wizard","alignItems","fontWeight","closedTreasureChest","normalizeAnswer","answer","replace","AnswerInput","startInTextMode","tutorialStep","currentAnswer","answerBlockData","currentStreak","setCurrentAnswer","isTextMode","setIsTextMode","currentAnswerBlockIndices","setCurrentAnswerBlockIndices","isAnswerComplete","isAnswerCorrect","startsWith","answerBackgroundColor","textAnswer","newAnswerBlockIndices","sToBlockify","used","nextIndex","findIndex","value","i","length","push","substring","updateUsedAnswerBlocks","handleCodeButtonClick","ele","endsWith","reduce","codeStr","answerBlockIndex","readOnly","cols","rows","maxWidth","backgroundImage","backgroundSize","backgroundRepeat","backgroundPosition","fontSize","fontFamily","resize","onChange","newValue","autoFocus","visibility","document","getElementById","getBoundingClientRect","s","suffix","border","setTimeout","answerInput","setSelectionRange","scrollHeight","indexInAllBlocks","concat","disabled","flexWrap","minWidth","c","times","Array","fill","join","Level","setClearedLevel","useParams","tutorialDirections","problems","description","questionArgs","answerArgs","problemData","setProblemData","isCorrect","setIsCorrect","problemNumber","setProblemNumber","questionArgIndices","setQuestionArgIndices","setAnswerBlockData","gotHint","setGotHint","setCurrentStreak","setTutorialStep","x","y","pointerPosition","setPointerPosition","innerText","undefined","fetch","then","res","json","data","showAnswer","setShowAnswer","Infinity","numRemaining","setNumRemaining","questionNumber","Math","floor","random","problemInfo","arr","_","shuffle","answerBlocks","answerBlockItem","a","numToClear","expectedAnswer","expectedAnswerNormal","currentAnswerNormal","animation","max","split","flat","focus","role","ariaLabel","minHeight","transition","window","confirm","preventDefault","Treasure","setSpells","isOpened","setOpened","opened","treasureData","setTreasureData","ranCode","setRanCode","openedHeading","openTreasureChestGold","usage","output","closedHeading","includes","treasure","App","parseInt","JSON","parse","localStorage","getItem","setLevel","setItem","stringify","className","path","exact","element","rootElement","createRoot","render"],"mappings":"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","file":"static/js/main.ff61e595.chunk.js","sourcesContent":["import \"./styles.css\";\r\n\r\nexport default function CodeSnippetRunner({ code, runCallback }) {\r\n  const printFunctionStr = `const print = (...items) => {\r\n      Array.prototype.forEach.call(items, (item) => {\r\n      if(item instanceof Array) {\r\n        item = \"[ \" + item.map((a) => {\r\n          if(typeof a === \"string\") { return \"'\" + a.replace(\"'\", \"\\\\'\") + \"'\"; }\r\n          else { return a; }\r\n        }).reduce((acc, a) => {\r\n          return acc + \", \" + a;\r\n        }) + \" ]\";\r\n      }\r\n      document.getElementById(\"output\").appendChild(document.createTextNode(item));\r\n      document.getElementById(\"output\").appendChild(document.createTextNode(\" \"));\r\n    });\r\n    document.getElementById(\"output\").appendChild(document.createTextNode(\"\\\\n\"));\r\n  };`;\r\n  console.log(printFunctionStr + \"\\n\" + code);\r\n  return (\r\n    <div id=\"code-runner\">\r\n      <button\r\n        onClick={() => {\r\n          eval(printFunctionStr + \"\\n\" + code);\r\n          typeof runCallback === \"function\" && runCallback();\r\n        }}\r\n      >\r\n        Run Code\r\n      </button>\r\n      <pre id=\"output\"></pre>\r\n    </div>\r\n  );\r\n}\r\n","export default __webpack_public_path__ + \"static/media/closed-treasure-chest.32351da1.png\";","import React from \"react\";\r\n\r\nexport default function SpellsList({ spells, handler, setClicked }) {\r\n  const selectedElement = React.useRef(null);\r\n  React.useEffect(() => {\r\n    if (setClicked && typeof setClicked === \"function\") {\r\n      spells.forEach(\r\n        (item) =>\r\n          setClicked(item) && handler(item, { target: selectedElement.current })\r\n      );\r\n    }\r\n  }, [setClicked, spells, handler, selectedElement]);\r\n  /*\r\n  React.useEffect(() => {\r\n    if (typeof setClicked === \"function\") {\r\n      spells.forEach((item) => setClicked(item) && handler(item, null));\r\n    }\r\n  }, [setClicked, spells, handler]);\r\n  */\r\n  return (\r\n    <div\r\n      style={{\r\n        position: \"fixed\",\r\n        top: 0,\r\n        left: 0,\r\n        width: \"100%\",\r\n        backgroundColor: \"rgba(75,0,255,0.5)\",\r\n        overflow: \"auto\",\r\n        padding: \"5px\"\r\n      }}\r\n    >\r\n      <span style={{ whiteSpace: \"nowrap\" }}>\r\n        Available Code Spells:\r\n        {(spells || []).map((item) => (\r\n          <button\r\n            onClick={(e) => handler && handler(item, e)}\r\n            style={{ margin: \"5px 5px\" }}\r\n            ref={\r\n              typeof setClicked === \"function\" && setClicked(item)\r\n                ? selectedElement\r\n                : null\r\n            }\r\n            key={item}\r\n          >\r\n            {item}\r\n          </button>\r\n        ))}\r\n      </span>\r\n    </div>\r\n  );\r\n}\r\n","export default __webpack_public_path__ + \"static/media/open-treasure-chest-empty.svg.2a02895f.png\";","export default __webpack_public_path__ + \"static/media/lock.55b3f1d2.png\";","export default __webpack_public_path__ + \"static/media/wizard-walking-forward.f140a331.gif\";","import React from \"react\";\r\nimport closedTreasureChest from \"../assets/closed-treasure-chest.png\";\r\nimport openTreasureChest from \"../assets/open-treasure-chest-empty.svg.png\";\r\nimport lock from \"../assets/lock.png\";\r\nimport wizard from \"../assets/wizard-walking-forward.gif\";\r\nimport { HashLink } from \"react-router-hash-link\";\r\nimport SpellsList from \"./SpellsList\";\r\nexport default function LevelMap({ currentLevel, levels, spells }) {\r\n  const completedLevels = levels?.slice(0, currentLevel) || [];\r\n  const remainingLevels = levels?.slice(currentLevel) || [];\r\n  const [selectedLevel, setSelectedLevel] = React.useState(null);\r\n  const isLevelAccessible = (level) => level.index <= currentLevel;\r\n  return (\r\n    <div\r\n      style={\r\n        {\r\n          /*display: \"grid\",\r\n        gridTemplateColumns: \"100px 100px 100px\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\"*/\r\n        }\r\n      }\r\n      onClick={() => setSelectedLevel(null)}\r\n    >\r\n      <SpellsList spells={spells || [\"print\"]} />\r\n      {selectedLevel != null ? (\r\n        isLevelAccessible(selectedLevel) ? (\r\n          <div\r\n            style={{\r\n              position: \"fixed\",\r\n              width: \"100%\",\r\n              /*minHeight: \"100px\",*/\r\n              backgroundColor: \"rgba(127, 127, 255, 0.75)\",\r\n              borderRadius: \"20px\"\r\n            }}\r\n          >\r\n            <HashLink\r\n              to={`/${\r\n                selectedLevel.type === \"treasure\"\r\n                  ? `treasure/${selectedLevel.num}`\r\n                  : `level/${selectedLevel.num}`\r\n              }`}\r\n              style={{\r\n                color: \"black\",\r\n                textDecoration: \"none\",\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n                padding: \"50px 0\"\r\n              }}\r\n            >\r\n              {selectedLevel.type === \"treasure\"\r\n                ? `Click to collect treasure`\r\n                : `Click to Start Level ${selectedLevel.num}`}\r\n            </HashLink>\r\n          </div>\r\n        ) : (\r\n          <div\r\n            style={{\r\n              position: \"fixed\",\r\n              width: \"100%\",\r\n              /*minHeight: \"100px\",*/\r\n              backgroundColor: \"rgba(200, 200, 200, 0.5)\",\r\n              borderRadius: \"20px\",\r\n              padding: \"10px 0\"\r\n            }}\r\n          >\r\n            <img\r\n              src={lock}\r\n              alt=\"Locked\"\r\n              width=\"100\"\r\n            />\r\n            <p style={{ marginTop: 0 }}>\r\n              You need to successfully complete previous levels before you can\r\n              access this.\r\n            </p>\r\n          </div>\r\n        )\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      {completedLevels.map((level, index) => (\r\n        <div\r\n          style={{\r\n            borderRadius: \"30px\",\r\n            width: \"50px\",\r\n            height: \"50px\",\r\n            backgroundColor: \"gold\",\r\n            textAlign: \"center\",\r\n            marginLeft: \"auto\",\r\n            marginRight: \"auto\",\r\n            marginTop: \"10px\"\r\n          }}\r\n          id={level.index}\r\n          onClick={(e) => {\r\n            console.log(e.currentTarget.id);\r\n            setSelectedLevel(level);\r\n            e.stopPropagation();\r\n          }}\r\n        >\r\n          {level.type === \"treasure\" ? (\r\n            <img\r\n              src={openTreasureChest}\r\n              width=\"40\"\r\n              alt=\"open treasure chest\"\r\n            />\r\n          ) : (\r\n            `Level ${level.num}`\r\n          )}\r\n        </div>\r\n      ))}\r\n      <div>\r\n        <img\r\n          src={wizard}\r\n          alt=\"The wizard walks forward!\"\r\n          width=\"53\"\r\n        />\r\n      </div>\r\n      {remainingLevels.map((level, index) => (\r\n        <div \r\n          style={{\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\"\r\n          }}\r\n        >\r\n          <div style={{ fontWeight:\"bold\", color:\"#084\" }}>\r\n            {index === 0 && \"Click to proceed ➡️\"}\r\n          </div>\r\n          <div\r\n            style={{\r\n              borderRadius: \"30px\",\r\n              width: \"50px\",\r\n              height: \"50px\",\r\n              backgroundColor: \"#dddddd\",\r\n              textAlign: \"center\",\r\n              marginTop: \"10px\"\r\n            }}\r\n            id={level.index}\r\n            onClick={(e) => {\r\n              console.log(e.currentTarget.id);\r\n              setSelectedLevel(level);\r\n              e.stopPropagation();\r\n            }}\r\n          >\r\n            {level.type === \"treasure\" ? (\r\n              <img\r\n                src={closedTreasureChest}\r\n                width=\"40\"\r\n                alt=\"open treasure chest\"\r\n              />\r\n            ) : (\r\n              <span>{`Level ${level?.num}`}</span>\r\n            )}\r\n          </div>\r\n          <div style={{ fontWeight:\"bold\", color:\"#084\" }}>\r\n            {index === 0 && \"⬅️ Click to proceed\"}\r\n          </div>\r\n        </div>\r\n      ))}\r\n      <HashLink to=\"/\">Go back</HashLink>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\n\nconst normalizeAnswer = (answer) => answer.replace(/\\s\\s+/g, \" \");\nconst repeatCharTimes = (c, times) => Array(times).fill(c).join(\"\");\n\nexport default function AnswerInput({\n  startInTextMode,\n  tutorialStep,\n  currentAnswer,\n  selectedElement,\n  answerBlockData,\n  currentStreak,\n  setCurrentAnswer,\n  // handleCodeButtonClick,\n  answer\n}) {\n  const [isTextMode, setIsTextMode] = React.useState(!!startInTextMode);\n  const [\n    currentAnswerBlockIndices,\n    setCurrentAnswerBlockIndices\n  ] = React.useState([]);\n  const isAnswerComplete =\n    normalizeAnswer(answer) === normalizeAnswer(currentAnswer);\n  const isAnswerCorrect = normalizeAnswer(answer).startsWith(\n    normalizeAnswer(currentAnswer)\n  );\n  const answerBackgroundColor = isAnswerComplete\n    ? \"green\"\n    : isAnswerCorrect\n    ? \"white\"\n    : \"red\";\n\n  const updateUsedAnswerBlocks = (textAnswer) => {\n    const newAnswerBlockIndices = [];\n    let sToBlockify = normalizeAnswer(textAnswer);\n    /*\n    let blocksLeft = answerBlockData\n      .slice()\n      .map(({ value }) => ({ value, used: false }));\n    */\n    answerBlockData.forEach((item) => (item.used = false));\n    let nextIndex = answerBlockData.findIndex((item) =>\n      sToBlockify.startsWith(item.value)\n    );\n    for (let i = 0; nextIndex !== -1 && i < answerBlockData.length; i++) {\n      newAnswerBlockIndices.push(nextIndex);\n      answerBlockData[nextIndex].used = true;\n      sToBlockify = sToBlockify.substring(\n        answerBlockData[nextIndex].value.length\n      );\n      nextIndex = answerBlockData.findIndex(\n        (item) => sToBlockify.startsWith(item.value) && !item.used\n      );\n    }\n    setCurrentAnswerBlockIndices(newAnswerBlockIndices);\n    setCurrentAnswer(textAnswer);\n  };\n\n  React.useEffect(() => {\n    updateUsedAnswerBlocks(currentAnswer);\n  }, [isTextMode, answerBlockData]);\n\n  const handleCodeButtonClick = (code, ele) => {\n    if (isTextMode) {\n      setCurrentAnswer(\n        currentAnswer.endsWith(code)\n          ? currentAnswer.slice(0, -code.length)\n          : currentAnswer + code\n      );\n      setIsTextMode(false);\n    } else {\n      setCurrentAnswer(\n        currentAnswerBlockIndices.reduce(\n          (codeStr, answerBlockIndex) =>\n            answerBlockData[answerBlockIndex].used\n              ? codeStr + answerBlockData[answerBlockIndex].value\n              : codeStr,\n          \"\"\n        ) + code\n      );\n    }\n  };\n\n  return (\n    <>\n      <h3>Answer:&nbsp;</h3>\n      {isTextMode ? (\n        <>\n          <label>\n            <textarea\n              id=\"answer\"\n              readOnly={tutorialStep !== 0}\n              value={currentAnswer}\n              cols={40}\n              rows={1}\n              ref={\n                tutorialStep === 4 || tutorialStep === 8\n                  ? selectedElement\n                  : null\n              }\n              style={{\n                maxWidth: \"95%\",\n                //background:\n                //  \"url('https://upload.wikimedia.org/wikipedia/commons/3/36/Fire-animation.gif')\",\n                //backgroundSize: \"contain\",\n                backgroundImage: currentStreak >= 3 && \"url('/fire.gif')\",\n                backgroundSize: \"10% 20px\",\n                backgroundColor: answerBackgroundColor,\n                //backgroundPosition: \"bottom\",\n                //backgroundRepeat: \"no-repeat\",\n                backgroundRepeat: \"repeat-x\",\n                backgroundPosition: \"100% 100%\",\n                //backgroundRepeat: \"no-repeat\",\n                fontSize: \"xx-large\",\n                fontWeight: \"bold\",\n                //color: \"green\",\n                padding: \"20px 5px\",\n                fontFamily: \"courier, monospace\",\n                resize: \"none\",\n                borderRadius: \"10px\"\n              }}\n              onChange={(e) => {\n                //console.log(e.target.style.height);\n                //e.target.style.height = \"\";\n                //e.target.style.height = e.target.scrollHeight - 40 + \"px\";\n                /*\n        const expectedAnswerNormal = expectedAnswer.replace(\n          /\\s\\s+/g,\n          \" \"\n        );\n        const actualAnswerNormal = e.target.value.replace(\n          /\\s\\s+/g,\n          \" \"\n        );\n\n        if (expectedAnswerNormal === actualAnswerNormal) {\n          e.target.style.backgroundColor = \"green\";\n          setTimeout(() => {\n            setIsCorrect(true);\n            setCurrentAnswer(\"\");\n            e.target.style.backgroundColor = \"\";\n          }, 1000);\n        } else if (\n          !expectedAnswerNormal.startsWith(actualAnswerNormal)\n        ) {\n          e.target.style.backgroundColor = \"red\";\n        } else {\n          e.target.style.backgroundColor = \"\";\n        }\n        */\n                const newValue = e.target.value;\n                const newAnswerBlockIndices = [];\n                let sToBlockify = newValue;\n                /*\n                let blocksLeft = answerBlockData\n                  .slice()\n                  .map(({ value }) => ({ value, used: false }));\n                */\n                answerBlockData.forEach((item) => (item.used = false));\n                let nextIndex = answerBlockData.findIndex((item) =>\n                  sToBlockify.startsWith(item.value)\n                );\n                for (\n                  let i = 0;\n                  nextIndex !== -1 && i < answerBlockData.length;\n                  i++\n                ) {\n                  newAnswerBlockIndices.push(nextIndex);\n                  answerBlockData[nextIndex].used = true;\n                  sToBlockify = sToBlockify.substring(\n                    answerBlockData[nextIndex].value.length\n                  );\n                  nextIndex = answerBlockData.findIndex(\n                    (item) => sToBlockify.startsWith(item.value) && !item.used\n                  );\n                }\n                setCurrentAnswerBlockIndices(newAnswerBlockIndices);\n                setCurrentAnswer(newValue, e.target);\n              }}\n              autoFocus\n            />\n          </label>\n        </>\n      ) : (\n        <>\n          <div\n            id=\"answerBlock\"\n            //style={{ position: \"relative\", backgroundColor: \"blue\" }}\n          >\n            <label>\n              <textarea\n                id=\"answer\"\n                readOnly\n                //value={currentAnswer}\n                //cols={40}\n                //rows={1}\n                ref={\n                  tutorialStep === 4 || tutorialStep === 8\n                    ? selectedElement\n                    : null\n                }\n                style={{\n                  maxWidth: \"95%\",\n                  visibility: \"hidden\",\n                  display: \"none\",\n                  color: \"white\",\n                  width: document\n                    .getElementById(\"blockAnswerDiv\")\n                    ?.getBoundingClientRect().width,\n                  height: document\n                    .getElementById(\"blockAnswerDiv\")\n                    ?.getBoundingClientRect().height,\n                  //background:\n                  //  \"url('https://upload.wikimedia.org/wikipedia/commons/3/36/Fire-animation.gif')\",\n                  //backgroundSize: \"contain\",\n                  backgroundImage: currentStreak >= 3 && \"url('/fire.gif')\",\n                  backgroundSize: \"10% 20px\",\n                  //backgroundPosition: \"bottom\",\n                  //backgroundRepeat: \"no-repeat\",\n                  backgroundRepeat: \"repeat-x\",\n                  backgroundPosition: \"100% 100%\",\n                  //backgroundRepeat: \"no-repeat\",\n                  fontSize: \"xx-large\",\n                  fontWeight: \"bold\",\n                  //color: \"green\",\n                  padding: \"20px 5px\",\n                  fontFamily: \"courier, monospace\",\n                  resize: \"none\",\n                  borderRadius: \"10px\"\n                }}\n                onChange={(e) => {\n                  setCurrentAnswer(e.target.value, e.target);\n                }}\n                onClick={(e) => {\n                  let i = 0;\n                  let s = \"\";\n                  let suffix =\n                    answerBlockData[currentAnswerBlockIndices[i]]?.value;\n                  while (\n                    answer.startsWith(s + suffix) &&\n                    i < currentAnswerBlockIndices.length\n                  ) {\n                    s += suffix;\n                    i++;\n                    suffix =\n                      answerBlockData[currentAnswerBlockIndices[i]]?.value;\n                  }\n                  currentAnswerBlockIndices\n                    .slice(i)\n                    .forEach((i) => (answerBlockData[i].used = false));\n                  setCurrentAnswer(s);\n                  setIsTextMode(true);\n                }}\n                autoFocus\n              />\n            </label>\n            <div\n              style={{\n                //position: \"absolute\",\n                top: \"50%\",\n                left: \"50%\",\n                width: \"95%\",\n                //transform: \"translate(-50%, -50%)\",\n                backgroundColor: answerBackgroundColor,\n                border: \"2px solid black\",\n                /*width: document\n                  .getElementById(\"blockAnswerDiv\")\n                  ?.getBoundingClientRect().width,\n                height: document\n                  .getElementById(\"blockAnswerDiv\")\n                  ?.getBoundingClientRect().height,*/\n                //background:\n                //  \"url('https://upload.wikimedia.org/wikipedia/commons/3/36/Fire-animation.gif')\",\n                //backgroundSize: \"contain\",\n                backgroundImage: currentStreak >= 3 && \"url('/fire.gif')\",\n                backgroundSize: \"10% 20px\",\n                //backgroundPosition: \"bottom\",\n                //backgroundRepeat: \"no-repeat\",\n                backgroundRepeat: \"repeat-x\",\n                backgroundPosition: \"100% 100%\",\n                //backgroundRepeat: \"no-repeat\",\n                fontSize: \"xx-large\",\n                fontWeight: \"bold\",\n                //color: \"green\",\n                padding: \"20px 5px\",\n                fontFamily: \"courier, monospace\",\n                borderRadius: \"10px\"\n              }}\n              id=\"block-answer-div\"\n              onClick={() => {\n                setIsTextMode(true);\n                setTimeout(() => {\n                  const answerInput = document.getElementById(\"answer\");\n                  answerInput.setSelectionRange(answer.length, answer.length);\n                  // Adapted from https://stackoverflow.com/a/48460773\n                  //   - 40 is for 20px top/bottom padding\n                  answerInput.style.height = \"\";\n                  answerInput.style.height =\n                    answerInput.scrollHeight - 40 + \"px\";\n                }, 0);\n              }}\n            >\n              {currentAnswerBlockIndices.map((indexInAllBlocks, index) => (\n                <button\n                  onClick={(e) => {\n                    console.log(currentAnswer, answer);\n                    console.log(currentAnswerBlockIndices);\n                    setIsTextMode(false);\n                    answerBlockData[indexInAllBlocks].used = false;\n                    setCurrentAnswerBlockIndices(\n                      currentAnswerBlockIndices\n                        .slice(0, index)\n                        .concat(currentAnswerBlockIndices.slice(index + 1))\n                    );\n                    handleCodeButtonClick(\n                      //answerBlockData[indexInAllBlocks].value,\n                      \"\",\n                      e.target\n                    );\n                    //e.target.disabled = true;\n                  }}\n                  style={{\n                    fontFamily: \"monospace\",\n                    fontSize: \"xx-large\",\n                    maxWidth: \"95%\",\n                    overflow: \"auto\"\n                  }}\n                  disabled={!answerBlockData[indexInAllBlocks]?.used}\n                >\n                  {answerBlockData[indexInAllBlocks]?.value}\n                </button>\n              ))}\n            </div>\n          </div>\n          <br />\n          <br />\n        </>\n      )}\n      <div\n        style={{\n          display: \"flex\",\n          flexWrap: \"wrap\",\n          justifyContent: \"space-around\",\n          maxWidth: \"95%\"\n        }}\n      >\n        {answerBlockData.map((item, index) => (\n          <button\n            onClick={(e) => {\n              console.log(index, currentAnswerBlockIndices);\n              setCurrentAnswerBlockIndices(\n                currentAnswerBlockIndices.concat(index)\n              );\n              handleCodeButtonClick(item.value, e.target);\n              item.used = true;\n              //e.target.disabled = true;\n            }}\n            style={{ fontFamily: \"monospace\", minWidth: 0 }}\n            disabled={item.used}\n          >\n            {item.used ? repeatCharTimes(\" \", item.value.length) : item.value}\n          </button>\n        ))}\n      </div>\n      <hr />\n    </>\n  );\n}\n","import React from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { HashLink } from \"react-router-hash-link\";\r\nimport SpellsList from \"./SpellsList\";\r\nimport _ from \"lodash\";\r\n// import ReactFitText from \"react-fittext\";\r\n// import AutosizeInput from \"react-input-autosize\";\r\nimport AnswerInput from \"./AnswerInput\";\r\n\r\nconst normalizeAnswer = (answer) => answer.replace(/\\s\\s+/g, \" \");\r\nconst repeatCharTimes = (c, times) => Array(times).fill(c).join(\"\");\r\n\r\nexport default function Level({ spells, setClearedLevel }) {\r\n  let { level } = useParams();\r\n  const tutorialDirections = [\r\n    \"\",\r\n    \"Click on a spell once to add its text to your answer.\",\r\n    \"You can also click on buttons in the problems to add their text. Uh oh! The answer box turned red. This means it's not correct.\",\r\n    \"No worries, we can click on the button again to remove this code.\",\r\n    \"Let's type in a space and quotes in the input. Still red.\",\r\n    \"OK, let's get a hint. Click on this button to remove all incorrect code and find out the next two symbols. This means we'll have to answer one more problem. Oh well, more practice for our wizard.\",\r\n    \"That's right, we forgot the open parenthesis.\",\r\n    \"Let's now click on the button again to reinstate the text.\",\r\n    \"Finally, let's add the remaining quotation marks and closing parenthesis to complete our answer. Yay, it turned green and the text disappeared, so this means we were correct!\",\r\n    \"That's all there is to it. Type in code and use the buttons to add code as you please. You can also get the full answer by clicking this button. But this means three more problems to solve.\"\r\n  ];\r\n  const [problemData, setProblemData] = React.useState({\r\n    type: \"foo\",\r\n    problems: [\r\n      {\r\n        description: \"Loading...\",\r\n        questionArgs: [],\r\n        answer: \"\",\r\n        answerArgs: []\r\n      }\r\n    ]\r\n  });\r\n  const [isCorrect, setIsCorrect] = React.useState(false);\r\n  const [problemNumber, setProblemNumber] = React.useState(0);\r\n  const [questionArgIndices, setQuestionArgIndices] = React.useState([]);\r\n  const [currentAnswer, setCurrentAnswer] = React.useState(\"\");\r\n  const [answerBlockData, setAnswerBlockData] = React.useState([]);\r\n  const [gotHint, setGotHint] = React.useState(false);\r\n  const [currentStreak, setCurrentStreak] = React.useState(0);\r\n  // const [tutorialStep, setTutorialStep] = React.useState(level === \"1\" ? 1 : 0);\r\n  const [tutorialStep, setTutorialStep] = React.useState(0);\r\n  const [pointerPosition, setPointerPosition] = React.useState({ x: 0, y: 0 });\r\n  const selectedElement = React.useRef(null);\r\n  //console.log(\"SE\", selectedElement, setClicked(\"print\"));\r\n  React.useEffect(() => {\r\n    console.log(selectedElement.current, \"\");\r\n    if (selectedElement.current) {\r\n      handleCodeButtonClick(\r\n        selectedElement.current.innerText,\r\n        selectedElement.current\r\n      );\r\n    }\r\n  }, [selectedElement, tutorialStep]);\r\n\r\n  /*\r\n  React.useEffect(() => {\r\n    if (problemData.problems.length > 0 && tutorialStep === 1) {\r\n      //document.body.//appendChild(\"<div👆\r\n      setTimeout(\r\n        () =>\r\n          (document.getElementById(\"tutorial-directions\").style.width =\r\n            \"500px\"),\r\n        5000\r\n      );\r\n    }\r\n  }, [problemData, tutorialStep]);\r\n*/\r\n  React.useEffect(() => {\r\n    if (level != undefined) {\r\n      console.log(`level${level}.json`);\r\n      fetch(`/level${level}.json`)\r\n        .then((res) => res.json())\r\n        .then((data) => setProblemData(data));\r\n    }\r\n  }, [level]);\r\n  const [showAnswer, setShowAnswer] = React.useState(false);\r\n  const [numRemaining, setNumRemaining] = React.useState(Infinity);\r\n  React.useEffect(() => {\r\n    const questionNumber = Math.floor(\r\n      Math.random() * problemData.problems.length\r\n    );\r\n    const problemInfo = problemData.problems[questionNumber];\r\n    const questionArgs = problemInfo.questionArgs;\r\n    const answerArgs = problemInfo.answerArgs;\r\n    const questionArgIndices = problemData.problems[\r\n      questionNumber\r\n    ].questionArgs.map((arr) => Math.floor(Math.random() * arr.length));\r\n    console.log(\"A\", questionNumber, questionArgIndices);\r\n    setProblemNumber(questionNumber);\r\n    setQuestionArgIndices(questionArgIndices);\r\n    setAnswerBlockData(\r\n      _.shuffle(problemData.problems[questionNumber].answerBlocks || []).map(\r\n        (answerBlockItem, used) => {\r\n          return {\r\n            value: answerBlockItem\r\n              .replace(\r\n                /%([0-9]+)/g,\r\n                (_, a) => answerArgs[a - 1][questionArgIndices[a - 1]]\r\n              )\r\n              .replace(\r\n                /%([0-9]+)/g,\r\n                (_, a) => questionArgs[a - 1][questionArgIndices[a - 1]]\r\n              ),\r\n            used: false\r\n          };\r\n        }\r\n      )\r\n    );\r\n    if (numRemaining === Infinity && problemData?.type !== \"foo\") {\r\n      // loaded\r\n      console.log(problemData);\r\n      setNumRemaining(problemData.numToClear || 5);\r\n    } else if (numRemaining > 0 && isCorrect) {\r\n      setNumRemaining(numRemaining - 1);\r\n      setGotHint(false);\r\n    } else if (numRemaining === 0) {\r\n      setClearedLevel();\r\n    }\r\n    setIsCorrect(false);\r\n    setShowAnswer(false);\r\n  }, [problemData, isCorrect]);\r\n\r\n  const problemInfo = problemData.problems[problemNumber];\r\n  const questionArgs = problemInfo.questionArgs;\r\n  const answerArgs = problemInfo.answerArgs;\r\n  const expectedAnswer = problemInfo.answer\r\n    .replace(\r\n      /%([0-9]+)/g,\r\n      (_, a) => answerArgs[a - 1][questionArgIndices[a - 1]]\r\n    )\r\n    .replace(\r\n      /%([0-9]+)/g,\r\n      (_, a) => questionArgs[a - 1][questionArgIndices[a - 1]]\r\n    );\r\n  const expectedAnswerNormal = normalizeAnswer(expectedAnswer);\r\n  const currentAnswerNormal = normalizeAnswer(currentAnswer);\r\n  const handleCodeButtonClick = (code, ele) => {\r\n    //const code = e.target.value?.replace(/\\r|\\n/g, \"\");\r\n    // const singleLineCode = e.target.value?.replace(/\\r|\\n/g, \"\");\r\n    if (tutorialStep > 0 && ele?.getBoundingClientRect()) {\r\n      setPointerPosition({\r\n        x:\r\n          ele.getBoundingClientRect().x + ele.getBoundingClientRect().width / 2,\r\n        y:\r\n          ele.getBoundingClientRect().y + ele.getBoundingClientRect().height / 2\r\n      });\r\n      ele.style.animation = \"buttonBlink 500ms 5\";\r\n      ele.style.backgroundColor = \"rgb(239, 239, 239)\";\r\n    }\r\n    if (tutorialStep !== 4 && tutorialStep !== 5 && tutorialStep < 8) {\r\n      setCurrentAnswer(\r\n        currentAnswer.endsWith(code)\r\n          ? currentAnswer.slice(0, -code.length)\r\n          : currentAnswer + code\r\n      );\r\n    } else if (tutorialStep === 4) {\r\n      setCurrentAnswer(currentAnswer + ' \"');\r\n    } else if (tutorialStep === 5) {\r\n      console.log(\"5\", tutorialStep);\r\n      setCurrentAnswer(currentAnswer.slice(0, -2) + '(\"');\r\n    } else if (tutorialStep === 8) {\r\n      setCurrentAnswer(currentAnswer + '\")');\r\n    }\r\n  };\r\n  const description = problemInfo.description\r\n    .replace(\r\n      /%([0-9]+)/g,\r\n      (_, a) => questionArgs[a - 1][questionArgIndices[a - 1]]\r\n    )\r\n    .replace(\r\n      /___+/,\r\n      currentAnswerNormal.substring(0, 100) +\r\n        repeatCharTimes(\r\n          \"_\",\r\n          Math.max(expectedAnswerNormal.length - currentAnswerNormal.length, 0)\r\n        )\r\n    )\r\n    .split(/<pre>|<\\/pre>/g)\r\n    .map((item, index) => (index % 2 === 0 ? item : <pre>{item}</pre>))\r\n    .map((item, index) =>\r\n      typeof item === \"string\"\r\n        ? item\r\n            .split(/<h3>|<\\/h3>/g)\r\n            .map((item, index) => (index % 2 === 0 ? item : <h3>{item}</h3>))\r\n        : item\r\n    )\r\n    .flat()\r\n    .map((item, index) =>\r\n      typeof item === \"string\"\r\n        ? item.split(/<codeButton>|<\\/codeButton>/g).map((item, index) =>\r\n            index % 2 === 0 ? (\r\n              item\r\n            ) : (\r\n              <button\r\n                onClick={(e) =>\r\n                  handleCodeButtonClick(e.target.innerText, e.target)\r\n                }\r\n                disabled={\r\n                  tutorialStep !== 0 &&\r\n                  tutorialStep !== 2 &&\r\n                  tutorialStep !== 3 &&\r\n                  tutorialStep !== 7\r\n                }\r\n                ref={\r\n                  tutorialStep === 2 ||\r\n                  tutorialStep === 3 ||\r\n                  tutorialStep ===\r\n                    7 /*&&\r\n                  expectedAnswerNormal\r\n                    .substring(currentAnswerNormal.length)\r\n                    .startsWith(item) &&\r\n                  !currentAnswer.endsWith(item)*/\r\n                    ? selectedElement\r\n                    : null\r\n                }\r\n              >\r\n                {item}\r\n              </button>\r\n            )\r\n          )\r\n        : item\r\n    );\r\n\r\n  // React.useEffect(() => console.log(description), []);\r\n\r\n  React.useEffect(() => {\r\n    // const expectedAnswerNormal = normalizeAnswer(expectedAnswer);\r\n    // const actualAnswerNormal = normalizeAnswer(currentAnswer);\r\n    const answerInput = document.getElementById(\"answer\");\r\n\r\n    if (answerInput) {\r\n      answerInput.focus();\r\n      answerInput.setSelectionRange(\r\n        answerInput.value.length,\r\n        answerInput.value.length\r\n      );\r\n      // Adapted from https://stackoverflow.com/a/48460773\r\n      //   - 40 is for 20px top/bottom padding\r\n      answerInput.style.height = \"\";\r\n      answerInput.style.height = answerInput.scrollHeight - 40 + \"px\";\r\n      if (\r\n        expectedAnswerNormal &&\r\n        expectedAnswerNormal === currentAnswerNormal\r\n      ) {\r\n        answerInput.style.backgroundColor = \"green\";\r\n        setTimeout(() => {\r\n          setIsCorrect(true);\r\n          setCurrentAnswer(\"\");\r\n          answerInput.style.backgroundColor = \"\";\r\n          if (!gotHint) {\r\n            setCurrentStreak(currentStreak + 1);\r\n          }\r\n        }, 1000);\r\n      } else if (!expectedAnswerNormal.startsWith(currentAnswerNormal)) {\r\n        answerInput.style.backgroundColor = \"red\";\r\n        setCurrentStreak(0);\r\n      } else {\r\n        answerInput.style.backgroundColor = \"\";\r\n      }\r\n    }\r\n  }, [currentAnswerNormal, expectedAnswerNormal, tutorialStep]);\r\n\r\n  return (\r\n    <div style={{ marginTop: \"45px\" }}>\r\n      {/*\r\n      <SpellsList\r\n        spells={spells}\r\n        setClicked={\r\n          tutorialStep === 1 &&\r\n          ((item) =>\r\n            expectedAnswerNormal.startsWith(item) &&\r\n            !currentAnswer.endsWith(item))\r\n        }\r\n        handler={(item, e) => {\r\n          // setCurrentAnswer(currentAnswer + item);\r\n          handleCodeButtonClick(item, e.target);\r\n        }}\r\n      />\r\n      */}\r\n      {tutorialStep > 0 ? (\r\n        <div\r\n          style={{\r\n            position: \"absolute\",\r\n            top: pointerPosition.y,\r\n            left: pointerPosition.x - 10,\r\n            textAlign: \"left\"\r\n          }}\r\n        >\r\n          <span role=\"img\" ariaLabel=\"pointer\" style={{ fontSize: \"xx-large\" }}>\r\n            👆\r\n          </span>\r\n          <div\r\n            id=\"tutorial-directions\"\r\n            style={{\r\n              backgroundColor: \"rgb(255, 255, 205, 1)\",\r\n              /*width: \"100%\",*/\r\n              maxWidth: \"100px\",\r\n              minHeight: \"50px\",\r\n              overflow: \"hidden\",\r\n              position: \"relative\",\r\n              //right: \"50px\"\r\n              left: \"10px\",\r\n              top: \"-10px\",\r\n              padding: \"5px\",\r\n              transition: \"1s\"\r\n            }}\r\n          >\r\n            {tutorialDirections[tutorialStep]}\r\n            <button\r\n              onClick={() =>\r\n                setTutorialStep((tutorialStep + 1) % tutorialDirections.length)\r\n              }\r\n              style={{\r\n                marginTop: \"20px\",\r\n                fontWeight: \"strong\",\r\n                display: \"block\"\r\n              }}\r\n            >\r\n              Click{\" \"}\r\n              {tutorialStep < tutorialDirections.length - 1\r\n                ? \"for the next step\"\r\n                : \"to finish\"}\r\n            </button>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      {numRemaining > 0 ? (\r\n        <>\r\n          <h2>Number of Questions Remaining to Level Up: {numRemaining}</h2>\r\n          {description}\r\n          <label style={{ display: \"none\" }}>\r\n            <h3>Answer:&nbsp;</h3>\r\n            <textarea\r\n              id=\"answerOld\"\r\n              readOnly={tutorialStep !== 0}\r\n              value={currentAnswer}\r\n              cols={40}\r\n              rows={1}\r\n              ref={\r\n                tutorialStep === 4 || tutorialStep === 8\r\n                  ? selectedElement\r\n                  : null\r\n              }\r\n              style={{\r\n                maxWidth: \"95%\",\r\n                //background:\r\n                //  \"url('https://upload.wikimedia.org/wikipedia/commons/3/36/Fire-animation.gif')\",\r\n                //backgroundSize: \"contain\",\r\n                backgroundImage: currentStreak >= 3 && \"url('/fire.gif')\",\r\n                backgroundSize: \"10% 20px\",\r\n                //backgroundPosition: \"bottom\",\r\n                //backgroundRepeat: \"no-repeat\",\r\n                backgroundRepeat: \"repeat-x\",\r\n                backgroundPosition: \"100% 100%\",\r\n                //backgroundRepeat: \"no-repeat\",\r\n                fontSize: \"xx-large\",\r\n                fontWeight: \"bold\",\r\n                //color: \"green\",\r\n                padding: \"20px 5px\",\r\n                fontFamily: \"courier, monospace\",\r\n                resize: \"none\",\r\n                borderRadius: \"10px\"\r\n              }}\r\n              onChange={(e) => {\r\n                //console.log(e.target.style.height);\r\n                //e.target.style.height = \"\";\r\n                //e.target.style.height = e.target.scrollHeight - 40 + \"px\";\r\n                /*\r\n                const expectedAnswerNormal = expectedAnswer.replace(\r\n                  /\\s\\s+/g,\r\n                  \" \"\r\n                );\r\n                const actualAnswerNormal = e.target.value.replace(\r\n                  /\\s\\s+/g,\r\n                  \" \"\r\n                );\r\n\r\n                if (expectedAnswerNormal === actualAnswerNormal) {\r\n                  e.target.style.backgroundColor = \"green\";\r\n                  setTimeout(() => {\r\n                    setIsCorrect(true);\r\n                    setCurrentAnswer(\"\");\r\n                    e.target.style.backgroundColor = \"\";\r\n                  }, 1000);\r\n                } else if (\r\n                  !expectedAnswerNormal.startsWith(actualAnswerNormal)\r\n                ) {\r\n                  e.target.style.backgroundColor = \"red\";\r\n                } else {\r\n                  e.target.style.backgroundColor = \"\";\r\n                }\r\n                */\r\n                setCurrentAnswer(e.target.value);\r\n              }}\r\n              autoFocus\r\n            />\r\n          </label>\r\n          <br />\r\n          <br />\r\n          <AnswerInput\r\n            startInTextMode={false}\r\n            tutorialStep={tutorialStep}\r\n            currentAnswer={currentAnswer}\r\n            selectedElement={selectedElement}\r\n            answerBlockData={answerBlockData}\r\n            currentStreak={currentStreak}\r\n            setCurrentAnswer={setCurrentAnswer}\r\n            answer={expectedAnswer}\r\n            handleCodeButtonClick={handleCodeButtonClick}\r\n          />\r\n          {/*<div style={{ display: \"flex\", justifyContent: \"space-around\" }}>\r\n            {answerBlockData.map((item) => (\r\n              <button\r\n                onClick={(e) => {\r\n                  handleCodeButtonClick(item.value, e.target);\r\n                  item.used = true;\r\n                  //e.target.disabled = true;\r\n                }}\r\n                disabled={item.used}\r\n              >\r\n                {item.value}\r\n              </button>\r\n            ))}\r\n          </div>\r\n          <button\r\n            onClick={() => {\r\n              const expectedAnswerNormal = normalizeAnswer(expectedAnswer);\r\n              const actualAnswerNormal = normalizeAnswer(currentAnswer);\r\n              const indexOfDivergence = Array.from(\r\n                expectedAnswerNormal\r\n              ).findIndex((c, index) => c !== actualAnswerNormal[index]);\r\n\r\n              if (indexOfDivergence !== -1) {\r\n                setCurrentAnswer(\r\n                  expectedAnswerNormal.substring(0, indexOfDivergence + 2)\r\n                );\r\n                setNumRemaining(numRemaining + 1);\r\n              }\r\n              setCurrentStreak(0);\r\n            }}\r\n            style={{ marginRight: \"5px\" }}\r\n            ref={tutorialStep === 5 ? selectedElement : null}\r\n            disabled={tutorialStep !== 0 && tutorialStep !== 5}\r\n          >\r\n            Fix current answer and 2 character hint (+1 problem to solve)\r\n          </button>*/}\r\n          <br />\r\n          <br />\r\n          <button\r\n            onClick={() => {\r\n              setShowAnswer(!showAnswer);\r\n              setGotHint(true);\r\n              if (!gotHint) {\r\n                setNumRemaining(numRemaining + 3);\r\n                setCurrentStreak(0);\r\n              }\r\n            }}\r\n            ref={tutorialStep === 9 ? selectedElement : null}\r\n            disabled={tutorialStep !== 0 && tutorialStep !== 9}\r\n          >\r\n            Click to{\" \"}\r\n            {showAnswer ? \"hide answer\" : \"show answer (+3 problems to solve)\"}\r\n          </button>\r\n          <div style={{ display: showAnswer ? \"block\" : \"none\" }}>\r\n            {expectedAnswer}\r\n          </div>\r\n          <br />\r\n          <br />\r\n          <p>\r\n            <HashLink\r\n              to=\"/map\"\r\n              onClick={(e) =>\r\n                window.confirm(\r\n                  \"Are you sure? If you return to the map, you'll need to start this level from the beginning.\"\r\n                ) || e.preventDefault()\r\n              }\r\n            >\r\n              Quit, and go back to the level map!\r\n            </HashLink>\r\n          </p>\r\n        </>\r\n      ) : (\r\n        <>\r\n          <h1 style={{ color: \"green\" }}>SUCCESS! Leveled Up!</h1>\r\n          <HashLink to=\"/map\">Go back to the map!</HashLink>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","export default __webpack_public_path__ + \"static/media/open-treasure-chest-gold.svg.8c7a6d8b.png\";","import React from \"react\";\r\nimport SpellsList from \"./SpellsList\";\r\nimport CodeSnippetRunner from \"./CodeSnippetRunner\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { HashLink } from \"react-router-hash-link\";\r\nimport closedTreasureChest from \"../assets/closed-treasure-chest.png\";\r\nimport openTreasureChestGold from \"../assets/open-treasure-chest-gold.svg.png\";\r\n\r\nexport default function Treasure({ spells, setSpells, isOpened, setOpened }) {\r\n  const { level = 0 } = useParams();\r\n  const opened = isOpened(level);\r\n  const [treasureData, setTreasureData] = React.useState(null);\r\n  const [ranCode, setRanCode] = React.useState(false);\r\n  React.useEffect(() => {\r\n    console.log(`/treasure${level}.json`);\r\n    fetch(`/treasure${level}.json`)\r\n      .then((res) => res.json())\r\n      .then((data) => setTreasureData(data));\r\n  }, [level]);\r\n  // console.log(treasureData);\r\n  return (\r\n    <>\r\n      <SpellsList spells={spells} disabled={true} />\r\n      {/*\r\n      <span style={{ backgroundColor: \"black\", color: \"white\" }}>\r\n        XP 0 Block inventory\r\n      </span>\r\n      */}\r\n      {!opened ? (\r\n        <>\r\n          <h1>{treasureData?.closedHeading}</h1>\r\n          <img\r\n            src={closedTreasureChest}\r\n            style={{ width: \"200px\", height: \"auto\" }}\r\n            alt=\"treasure\"\r\n            onClick={(e) => {\r\n              if (treasureData) {\r\n                setOpened(true);\r\n                if (!spells.includes(treasureData?.treasure)) {\r\n                  setSpells(spells.concat(treasureData?.treasure));\r\n                }\r\n              }\r\n            }}\r\n          />\r\n          <h2>Click the box above to open!</h2>\r\n        </>\r\n      ) : (\r\n        <>\r\n          {/*<p>You can use this spell to output text to the screen.</p>*/}\r\n          <h1>{treasureData?.openedHeading}</h1>\r\n          <p>\r\n            <img\r\n              src={openTreasureChestGold}\r\n              alt=\"Open treasure chest with gold\"\r\n              width=\"100\"\r\n            />\r\n          </p>\r\n          <p>{treasureData?.description}</p>\r\n          {treasureData?.usage && (\r\n            <>\r\n              <h3>Example usage:</h3>\r\n              <pre>{treasureData.usage}</pre>\r\n            </>\r\n          )}\r\n          {treasureData?.output && (\r\n            <>\r\n              <h3>Output from spell:</h3>\r\n              {/*<pre>{treasureData.output}</pre>*/}\r\n              <CodeSnippetRunner\r\n                code={treasureData.usage}\r\n                runCallback={() => setRanCode(true)}\r\n              />\r\n            </>\r\n          )}\r\n          {/*<button onClick={() => setOpened(false)}>print</button>*/}\r\n          <HashLink\r\n            to=\"/map\"\r\n            style={{\r\n              animation: ranCode ? \"textBlink 500ms 3\" : \"\",\r\n              backgroundColor: ranCode ? \"gold\" : \"white\"\r\n            }}\r\n          >\r\n            Go forward\r\n          </HashLink>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\nimport \"./styles.css\";\nimport closedTreasureChest from \"./assets/closed-treasure-chest.png\";\nimport SpellsList from \"./components/SpellsList\";\nimport LevelMap from \"./components/LevelMap\";\nimport Level from \"./components/Level\";\nimport Treasure from \"./components/Treasure\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\nimport { HashLink } from \"react-router-hash-link\";\n\nexport default function App() {\n  const isOpened = (index) => {\n    return (\n      levels.findIndex(\n        (item) => item.type === \"treasure\" && item.num === parseInt(index, 10)\n      ) < currentLevel\n    );\n  };\n  const [spells, setSpells] = React.useState(\n    JSON.parse(localStorage.getItem(\"spells\")) || []\n  );\n  const [currentLevel, setLevel] = React.useState(\n    parseInt(localStorage.getItem(\"currentLevel\"), 10) || 0\n  );\n  const [levels, setLevels] = React.useState(\n    [\n      { type: \"treasure\", num: 0 },\n      { type: \"level\", num: 1 },\n      { type: \"treasure\", num: 1 },\n      { type: \"level\", num: 2 },\n      { type: \"treasure\", num: 2 },\n      { type: \"level\", num: 3 },\n      { type: \"treasure\", num: 3 },\n      { type: \"level\", num: 4 },\n      { type: \"treasure\", num: 4 },\n      { type: \"level\", num: 5 },\n      { type: \"treasure\", num: 5 }\n      /*{ type: \"level\", num: 6 },\n      { type: \"treasure\", num: 6 },\n      { type: \"level\", num: 7 },\n      { type: \"treasure\", num: 7 }*/\n    ].map((item, index) => ({ ...item, index }))\n  );\n\n  React.useEffect(() => {\n    localStorage.setItem(\"spells\", JSON.stringify(spells));\n  }, [spells]);\n\n  function setClearedLevel() {\n    console.log(\"CL\", currentLevel);\n    localStorage.setItem(\"currentLevel\", currentLevel + 1);\n    setLevel(currentLevel + 1);\n  }\n\n  return (\n    <div className=\"App\" style={{ marginTop: \"45px\" }}>\n      <BrowserRouter>\n        <Routes>\n          <Route\n            path=\"/\"\n            exact\n            element={\n              <Treasure\n                spells={spells}\n                setSpells={setSpells}\n                isOpened={isOpened}\n                setOpened={setClearedLevel}\n              />\n            }\n          />\n          <Route\n            path=\"/codejaadoo\"\n            exact\n            element={\n              <Treasure\n                spells={spells}\n                setSpells={setSpells}\n                isOpened={isOpened}\n                setOpened={setClearedLevel}\n              />\n            }\n          />\n          <Route\n            path=\"/map\"\n            exact\n            element={\n              <LevelMap\n                levels={levels}\n                currentLevel={currentLevel}\n                spells={spells}\n              />\n            }\n          />\n          <Route\n            path=\"/level/:level\"\n            exact\n            element={\n              <Level spells={spells} setClearedLevel={setClearedLevel} />\n            }\n          />\n          <Route\n            path=\"/treasure/:level\"\n            exact\n            element={\n              <Treasure\n                spells={spells}\n                setSpells={setSpells}\n                isOpened={isOpened}\n                setOpened={setClearedLevel}\n              />\n            }\n          />\n        </Routes>\n      </BrowserRouter>\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n"],"sourceRoot":""}